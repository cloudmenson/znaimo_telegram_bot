function registerProfileHandlers(bot) {
  bot.command("profile", async (ctx) => {
    const id = ctx.from.id;
    const user = await loadUser(id);
    // –Ø–∫—â–æ –∞–Ω–∫–µ—Ç—É –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    if (!user || !user.finished) {
      return ctx.reply(
        "–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏."
      );
    }
    // –Ø–∫—â–æ —Ñ–æ—Ç–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ
    if (!user.data.photos || user.data.photos.length === 0) {
      return ctx.reply(
        "–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.\n\n" +
          "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ, –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–±–æ –≤–∏–∫–æ–Ω–∞–π /edit."
      );
    }
    // –Ü–Ω–∞–∫—à–µ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É —Ç–∞ –º–µ–Ω—é –¥—ñ–π
    const photos = user.data.photos;
    await ctx.replyWithMediaGroup([
      {
        type: "photo",
        media: photos[0],
        caption: prettyProfile(user),
        parse_mode: "HTML",
      },
      ...photos.slice(1).map((file_id) => ({
        type: "photo",
        media: file_id,
      })),
    ]);
    await ctx.reply("–û–±–µ—Ä–∏ –¥—ñ—é:", mainMenu);
  });

  bot.hears("üìù –ü—Ä–æ—Ñ—ñ–ª—å", async (ctx) => {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user || !user.finished) {
      return ctx.reply("–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! –ù–∞—Ç–∏—Å–Ω–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏.");
    }
    if (!user.data.photos || user.data.photos.length === 0) {
      return ctx.reply("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.");
    }
    const photos = user.data.photos;
    await ctx.replyWithMediaGroup([
      {
        type: "photo",
        media: photos[0],
        caption: prettyProfile(user),
        parse_mode: "HTML",
      },
      ...photos.slice(1).map((file_id) => ({
        type: "photo",
        media: file_id,
      })),
    ]);
    await ctx.reply("–û–±–µ—Ä–∏ –¥—ñ—é:", mainMenu);
  });

  bot.action("profile", async (ctx) => {
    try {
      const id = ctx.from.id;
      let user = await loadUser(id);
      if (!user) {
        return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
      }
      if (!user.finished) {
        return ctx.answerCbQuery(
          "–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! –ù–∞—Ç–∏—Å–Ω–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏."
        );
      }
      if (!user.data.photos || user.data.photos.length === 0) {
        return ctx.answerCbQuery("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.");
      }
      const photos = user.data.photos;
      await ctx.replyWithMediaGroup([
        {
          type: "photo",
          media: photos[0],
          caption: prettyProfile(user),
          parse_mode: "HTML",
        },
        ...photos.slice(1).map((file_id) => ({
          type: "photo",
          media: file_id,
        })),
      ]);
      await ctx.reply("–û–±–µ—Ä–∏ –¥—ñ—é:", mainMenu);

      await ctx.answerCbQuery();
    } catch (e) {
      console.error("PROFILE ERROR:", e);
      await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
  });
}

module.exports = { registerProfileHandlers };
