function registerStartHandlers(bot) {
  bot.start(async (ctx) => {
    // 0) Check if user already exists in DB
    const existing = await loadUser(ctx.from.id);
    if (existing) {
      return ctx.reply("–£ –≤–∞—Å –≤–∂–µ —î –∞–Ω–∫–µ—Ç–∞.", mainMenu);
    }
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ id —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, —è–∫—â–æ —î startPayload
    const referrerId = ctx.startPayload ? parseInt(ctx.startPayload) : null;

    // 1) –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä ‚Äútyping‚Ä¶‚Äù
    // await ctx.sendChatAction("typing");
    // 2) –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è
    await ctx.reply(
      `üëã –ü—Ä–∏–≤—ñ—Ç, ${ctx.from.first_name}! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Znaimo!`
    );

    // –î–æ–ø–æ–≤–Ω–µ–Ω–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤—ñ—Ç–∞–Ω–Ω—è
    // await ctx.sendChatAction("typing");
    await ctx.reply(
      `–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ:
‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω—É –∞–Ω–∫–µ—Ç—É
‚Ä¢ –ó–Ω–∞–π—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–∏—Ö
‚Ä¢ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ –ª–∞–π–∫—ñ–≤!`
    );

    // 3) –©–µ –æ–¥–∏–Ω ‚Äútyping‚Ä¶‚Äù –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º
    // await ctx.sendChatAction("typing");
    // 4) –í–ª–∞—Å–Ω–µ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–¥—Ä–∞–∑—É –∑ referrer/referrals
    const id = ctx.from.id;
    const user = {
      ...startProfile,
      id,
      username: ctx.from.username || null,
      referrer: referrerId || null,
      referrals: [],
    };
    await saveUser(user);

    // –Ø–∫—â–æ —î —Ä–µ—Ñ–µ—Ä–µ—Ä —ñ —Ü–µ –Ω–µ —Å–∞–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –¥–æ–¥–∞—î–º–æ id –¥–æ –π–æ–≥–æ referrals
    if (referrerId && referrerId !== ctx.from.id) {
      const refUser = await loadUser(referrerId);
      if (refUser) {
        refUser.referrals = refUser.referrals || [];
        if (!refUser.referrals.includes(ctx.from.id)) {
          refUser.referrals.push(ctx.from.id);
          await saveUser(refUser);
        }
      }
    }

    await ctx.reply(
      "‚úçÔ∏è –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.",
      Markup.inlineKeyboard([
        [Markup.button.callback("–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É", "create_profile")],
      ])
    );
  });

  bot.action("create_profile", async (ctx) => {
    try {
      const id = ctx.from.id;
      const existing = await loadUser(id);
      if (existing && existing.finished) {
        return ctx.reply("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞.", mainMenu);
      }
      // –ü–æ–≤–Ω—ñ—Å—Ç—é –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∞–Ω–∫–µ—Ç–∏
      const user = { ...startProfile, id, username: ctx.from.username || null };
      await saveUser(user);
      // –ó–∞–ø–∏—Ç—É—î–º–æ —ñ–º'—è ‚Äì —Ç–µ–ø–µ—Ä user.finished –±—É–¥–µ false
      await ctx.reply("‚úèÔ∏è –ü–æ—á–Ω–µ–º–æ –∑ —ñ–º–µ–Ω—ñ. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?");
    } catch (e) {
      console.error("CREATE_PROFILE ERROR:", e);
      await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
  });
}

module.exports = { registerStartHandlers };
