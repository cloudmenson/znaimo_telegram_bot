const express = require("express");
const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();

const { loadUser, saveUser, removeUser, getAllUsers } = require("./mongo");

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ Telegraf
bot.catch((err, ctx) => {
  console.error("BOT ERROR", err);
  ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
});

// –û—Å–Ω–æ–≤–Ω—ñ –º–µ–Ω—é —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
const mainMenu = Markup.keyboard([
  ["üîç –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏", "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"],
])
  .resize()
  .oneTime(false);

// –ú–µ–Ω—é –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ª–∞–π–∫—ñ–≤ (reply-keyboard)
const pendingMenu = Markup.keyboard([["üíù –í–∑–∞—î–º–Ω–æ", "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏"]])
  .resize()
  .oneTime(false);

// –ú–µ–Ω—é –¥–ª—è –ø–æ—à—É–∫—É (reply-keyboard)
const searchMenu = Markup.keyboard([["üíù", "‚ùå", "‚öôÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å"]])
  .resize()
  .oneTime(false);

// –ú–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ‚Äî —Ç—ñ–ª—å–∫–∏ –≤–æ–Ω–æ —ñ–Ω–ª–∞–π–Ω!
const editProfileMenu = Markup.inlineKeyboard([
  [
    Markup.button.callback("‚úèÔ∏è –Ü–º'—è", "edit_name"),
    Markup.button.callback("üéÇ –í—ñ–∫", "edit_age"),
  ],
  [
    Markup.button.callback("üè† –ú—ñ—Å—Ç–æ", "edit_city"),
    Markup.button.callback("üìù –û–ø–∏—Å", "edit_about"),
  ],
  [
    Markup.button.callback("ü§≥ –§–æ—Ç–æ", "edit_photos"),
    Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "edit_back"),
  ],
]);

const startProfile = {
  step: "name",
  editStep: null,
  data: {
    name: "",
    age: "",
    city: "",
    about: "",
    photos: [],
  },
  seen: [],
  finished: false,
  currentView: null,
  pendingLikes: [],
};

function prettyProfile(user) {
  const name = user.data.name || "";
  const age = user.data.age || "";
  const city = user.data.city || "";
  const about = user.data.about || "";
  let profileText = `<b>‚Ä¢ –Ü–º'—è:</b> ${name}\n<b>‚Ä¢ –í—ñ–∫:</b> ${age}\n`;
  if (city) {
    profileText += `<b>‚Ä¢ –ú—ñ—Å—Ç–æ:</b> ${city}\n`;
  }
  profileText += `<b>‚Ä¢ –ü—Ä–æ —Å–µ–±–µ:</b> ${about}`;
  return profileText;
}

async function checkPendingLikes(ctx, user) {
  try {
    if (!user || !user.pendingLikes || user.pendingLikes.length === 0)
      return false;
    const pendingId = user.pendingLikes[0];
    const pendingUser = await loadUser(pendingId);
    if (
      pendingUser &&
      pendingUser.data &&
      pendingUser.data.photos &&
      pendingUser.data.photos.length > 0
    ) {
      // 1. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–Ω–∫–µ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      await ctx.replyWithMediaGroup([
        {
          type: "photo",
          media: pendingUser.data.photos[0],
          caption: prettyProfile(pendingUser),
          parse_mode: "HTML",
        },
        ...pendingUser.data.photos.slice(1).map((file_id) => ({
          type: "photo",
          media: file_id,
        })),
      ]);
      // 2. –ü–æ—Ç—ñ–º –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é
      await ctx.reply("–í–∞–º —Ö—Ç–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", pendingMenu);
    } else {
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–∏–≤ –∞–Ω–∫–µ—Ç—É ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ –∑ —á–µ—Ä–≥–∏
      user.pendingLikes.shift();
      await saveUser(user);
      return await checkPendingLikes(ctx, user); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    }
    return true;
  } catch (e) {
    console.error("checkPendingLikes ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    return false;
  }
}

bot.start(async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    user = { ...startProfile, id, username: ctx.from.username || null };
    await saveUser(user);
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–∏—à–µ –∫–Ω–æ–ø–∫—É "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É" (inline)
    await ctx.reply(
      "–í—ñ—Ç–∞—é —É Znaimo! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.",
      Markup.inlineKeyboard([
        [Markup.button.callback("–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É", "create_profile")],
      ])
    );
  } else {
    ctx.reply("–¢–∏ –≤–∂–µ –º–∞—î—à –∞–Ω–∫–µ—Ç—É! –û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ:", mainMenu);
  }
});

// ------------------ INLINE-–ö–ù–û–ü–ö–ò –¢–ê CALLBACK-–∏ ------------------

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É (–∫–æ–ª–∏ —â–µ –Ω–µ —ñ—Å–Ω—É—î)
bot.action("create_profile", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      user = { ...startProfile, id, username: ctx.from.username || null };
      await saveUser(user);
    }
    user.step = "name";
    await saveUser(user);
    await ctx.editMessageText("–ü–æ—á–Ω–µ–º–æ –∑ —ñ–º–µ–Ω—ñ. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?");
  } catch (e) {
    console.error("CREATE_PROFILE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

bot.command("find", async (ctx) => {
  // –î—ñ—è —è–∫ bot.action("search")
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start");
  }
  await handleSearch(ctx, user, id, false);
});

bot.command("profile", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! –ù–∞—Ç–∏—Å–Ω–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏.");
  }
  if (!user.data.photos || user.data.photos.length === 0) {
    return ctx.reply("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.");
  }
  const photos = user.data.photos;
  await ctx.replyWithMediaGroup([
    {
      type: "photo",
      media: photos[0],
      caption: prettyProfile(user),
      parse_mode: "HTML",
    },
    ...photos.slice(1).map((file_id) => ({
      type: "photo",
      media: file_id,
    })),
  ]);
  await ctx.reply("–û–±–µ—Ä–∏ –¥—ñ—é:", mainMenu);
});

bot.command("edit", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start");
  }
  await ctx.reply("–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?", editProfileMenu);
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –ø–æ—à—É–∫
bot.action("search", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ª–∞–π–∫—ñ–≤ –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º
    const hasPending = await checkPendingLikes(ctx, user);
    if (hasPending) return;

    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.finished) {
      return ctx.answerCbQuery("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É!");
    }
    await handleSearch(ctx, user, id, true);
  } catch (e) {
    console.error("SEARCH ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

bot.hears("üîç –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);

  const hasPending = await checkPendingLikes(ctx, user);
  if (hasPending) return;

  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start");
  }
  await handleSearch(ctx, user, id, false);
});

bot.hears("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start");
  }
  await ctx.reply("–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?", editProfileMenu);
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
bot.action("edit_profile", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.finished) {
      return ctx.answerCbQuery("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É!");
    }
    await ctx.editMessageText("–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?", editProfileMenu);
  } catch (e) {
    console.error("EDIT_PROFILE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

// –ú–µ–Ω—é –ø–æ—à—É–∫—É: –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫/–ø—Ä–æ—Ñ—ñ–ª—å
bot.action("like", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.currentView) {
      return ctx.answerCbQuery("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
    await handleLikeDislike(ctx, user, "like", true);
  } catch (e) {
    console.error("LIKE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("dislike", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.currentView) {
      return ctx.answerCbQuery("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
    await handleLikeDislike(ctx, user, "dislike", true);
  } catch (e) {
    console.error("DISLIKE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("profile", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.finished) {
      return ctx.answerCbQuery(
        "–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! –ù–∞—Ç–∏—Å–Ω–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏."
      );
    }
    if (!user.data.photos || user.data.photos.length === 0) {
      return ctx.answerCbQuery("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.");
    }
    const photos = user.data.photos;
    await ctx.replyWithMediaGroup([
      {
        type: "photo",
        media: photos[0],
        caption: prettyProfile(user),
        parse_mode: "HTML",
      },
      ...photos.slice(1).map((file_id) => ({
        type: "photo",
        media: file_id,
      })),
    ]);
    await ctx.reply("–û–±–µ—Ä–∏ –¥—ñ—é:", mainMenu);
    await ctx.answerCbQuery();
  } catch (e) {
    console.error("PROFILE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ pending likes —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
bot.hears("üíù –í–∑–∞—î–º–Ω–æ", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user.pendingLikes || user.pendingLikes.length === 0) {
    return ctx.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –ª–∞–π–∫.", mainMenu);
  }
  const pendingId = user.pendingLikes.shift();
  await saveUser(user);
  const pendingUser = await loadUser(pendingId);

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç pendingUser –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
  if (pendingUser && pendingUser.username) {
    await ctx.reply(`
      üíû –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ @${pendingUser.username}!\n\n +
      –ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ —á—É–¥–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é!\n\n +
      https://t.me/${pendingUser.username}
      `);
  }

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ctx.from) pendingUser
  if (pendingUser) {
    const usernameOrId = user.username ? user.username : user.id;
    await ctx.telegram.sendMessage(
      pendingId,
      `üíû –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ @${pendingUser.username}!\n\n` +
        `–ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ —á—É–¥–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é!\n\n` +
        `https://t.me/${usernameOrId}`
    );
  }
});
bot.hears("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user.pendingLikes || user.pendingLikes.length === 0) {
    return ctx.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –ª–∞–π–∫.", mainMenu);
  }
  user.pendingLikes.shift();
  await saveUser(user);
  if (user.pendingLikes.length > 0) {
    await checkPendingLikes(ctx, user);
  } else {
    await ctx.reply("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ.", mainMenu);
  }
});

// –ú–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: –ø–æ–ª—è
bot.action("edit_name", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_name";
    await saveUser(user);
    await ctx.editMessageText("–í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º º—è:");
  } catch (e) {
    console.error("EDIT_NAME ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_age", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_age";
    await saveUser(user);
    await ctx.editMessageText("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –≤—ñ–∫:");
  } catch (e) {
    console.error("EDIT_AGE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_city", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_city";
    await saveUser(user);
    await ctx.editMessageText("–í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:");
  } catch (e) {
    console.error("EDIT_CITY ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_about", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_about";
    await saveUser(user);
    await ctx.editMessageText("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å (5-200 —Å–∏–º–≤–æ–ª—ñ–≤):");
  } catch (e) {
    console.error("EDIT_ABOUT ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_photos", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_photos";
    user.data.photos = [];
    await saveUser(user);
    await ctx.editMessageText(
      "–í—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ –æ–¥–Ω–µ –∑–∞ –æ–¥–Ω–∏–º (–º–∞–∫—Å–∏–º—É–º 3). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—à ‚Äî –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'."
    );
  } catch (e) {
    console.error("EDIT_PHOTOS ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_back", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.editMessageText(
        "–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! /start ‚Äî —â–æ–± –ø–æ—á–∞—Ç–∏."
      );
    }
    if (!user.finished) {
      return ctx.editMessageText(
        "–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! /start ‚Äî —â–æ–± –ø–æ—á–∞—Ç–∏."
      );
    }
    if (!user.data.photos || user.data.photos.length === 0) {
      return ctx.editMessageText("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.");
    }
    const photos = user.data.photos;
    await ctx.replyWithMediaGroup([
      {
        type: "photo",
        media: photos[0],
        caption: prettyProfile(user),
        parse_mode: "HTML",
      },
      ...photos.slice(1).map((file_id) => ({
        type: "photo",
        media: file_id,
      })),
    ]);
    await ctx.reply("–û–±–µ—Ä–∏ –¥—ñ—é:", mainMenu);
  } catch (e) {
    console.error("EDIT_BACK ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É/—Ñ–æ—Ç–æ/–µ—Ç–∞–ø–∏)
bot.on("message", async (ctx, next) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      user = { ...startProfile, id, username: ctx.from.username || null };
      await saveUser(user);
    }
    if (!user.pendingLikes) user.pendingLikes = [];

    // --- –ë–ª–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ---
    if (user && user.editStep) {
      try {
        switch (user.editStep) {
          case "edit_name":
            if (!ctx.message.text || ctx.message.text.length < 2) {
              return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º º—è:");
            }
            user.data.name = ctx.message.text.trim();
            user.editStep = null;
            await saveUser(user);
            await ctx.reply("–Ü–º º—è –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            break;
          case "edit_age":
            {
              const age = parseInt(ctx.message.text, 10);
              if (isNaN(age) || age < 16 || age > 99) {
                return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (16-99):");
              }
              user.data.age = age;
              user.editStep = null;
              await saveUser(user);
              await ctx.reply("–í—ñ–∫ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            }
            break;
          case "edit_city":
            if (!ctx.message.text || ctx.message.text.length < 2) {
              return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:");
            }
            user.data.city = ctx.message.text.trim();
            user.editStep = null;
            await saveUser(user);
            await ctx.reply("–ú—ñ—Å—Ç–æ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            break;
          case "edit_about":
            if (
              !ctx.message.text ||
              ctx.message.text.length < 5 ||
              ctx.message.text.length > 200
            ) {
              return ctx.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –≤—ñ–¥ 5 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤:");
            }
            user.data.about = ctx.message.text.trim();
            user.editStep = null;
            await saveUser(user);
            await ctx.reply("–û–ø–∏—Å –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            break;
          case "edit_photos":
            if (ctx.message.photo) {
              if (user.data.photos.length >= 3) {
                return ctx.reply(
                  "3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."
                );
              }
              const fileId =
                ctx.message.photo[ctx.message.photo.length - 1].file_id;
              user.data.photos.push(fileId);
              await saveUser(user);
              if (user.data.photos.length === 3) {
                await ctx.reply(
                  "3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."
                );
              } else {
                await ctx.reply(
                  `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${user.data.photos.length}/3). –©–µ –¥–æ–¥–∞—Ç–∏? –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.`
                );
              }
            } else if (
              ctx.message.text === "–ì–æ—Ç–æ–≤–æ" ||
              ctx.message.text.toLowerCase() === "–≥–æ—Ç–æ–≤–æ"
            ) {
              if (user.data.photos.length === 0) {
                await ctx.reply("–î–æ–¥–∞–π –º—ñ–Ω—ñ–º—É–º –æ–¥–Ω–µ —Ñ–æ—Ç–æ!");
              } else {
                user.editStep = null;
                await saveUser(user);
                await ctx.reply("–§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", mainMenu);
              }
            } else {
              await ctx.reply("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.");
            }
            break;
        }
        return;
      } catch (e) {
        console.error("EDIT_STEP MESSAGE ERROR:", e);
        await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        return;
      }
    }

    // –Ø–∫—â–æ –∞–Ω–∫–µ—Ç–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ ‚Äî –Ω–µ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ (–≤—Å—ñ –¥—ñ—ó —á–µ—Ä–µ–∑ —ñ–Ω–ª–∞–π–Ω)
    if (user.finished) return next();

    // --- –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ step-by-step ---
    try {
      switch (user.step) {
        case "name":
          if (!ctx.message.text || ctx.message.text.length < 2) {
            return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º º—è:");
          }
          user.data.name = ctx.message.text.trim();
          user.step = "age";
          await saveUser(user);
          await ctx.reply("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?");
          break;
        case "age":
          {
            const age = parseInt(ctx.message.text, 10);
            if (isNaN(age) || age < 16 || age > 99) {
              return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (16-99):");
            }
            user.data.age = age;
            user.step = "city";
            await saveUser(user);
            await ctx.reply("–í —è–∫–æ–º—É –º—ñ—Å—Ç—ñ —Ç–∏ –∂–∏–≤–µ—à?");
          }
          break;
        case "city":
          if (!ctx.message.text || ctx.message.text.length < 2) {
            return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:");
          }
          user.data.city = ctx.message.text.trim();
          user.step = "about";
          await saveUser(user);
          await ctx.reply("–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ –∫–æ—Ä–æ—Ç–∫–æ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):");
          break;
        case "about":
          if (
            !ctx.message.text ||
            ctx.message.text.length < 5 ||
            ctx.message.text.length > 200
          ) {
            return ctx.reply(
              "–í–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ (5-200 —Å–∏–º–≤–æ–ª—ñ–≤):"
            );
          }
          user.data.about = ctx.message.text.trim();
          user.step = "photos";
          await saveUser(user);
          await ctx.reply(
            "–î–æ–¥–∞–π —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3).\n–í—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ –æ–¥–Ω–µ –∑–∞ –æ–¥–Ω–∏–º, –∫–æ–ª–∏ –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'."
          );
          break;
        case "photos":
          if (ctx.message.photo) {
            if (user.data.photos.length >= 3) {
              return ctx.reply(
                "3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."
              );
            }
            const fileId =
              ctx.message.photo[ctx.message.photo.length - 1].file_id;
            user.data.photos.push(fileId);
            await saveUser(user);
            if (user.data.photos.length === 3) {
              await ctx.reply("3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.");
            } else {
              await ctx.reply(
                `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${user.data.photos.length}/3). –©–µ –¥–æ–¥–∞—Ç–∏? –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.`
              );
            }
          } else if (
            ctx.message.text === "–ì–æ—Ç–æ–≤–æ" ||
            ctx.message.text.toLowerCase() === "–≥–æ—Ç–æ–≤–æ"
          ) {
            if (user.data.photos.length === 0) {
              await ctx.reply("–î–æ–¥–∞–π –º—ñ–Ω—ñ–º—É–º –æ–¥–Ω–µ —Ñ–æ—Ç–æ!");
            } else {
              user.finished = true;
              user.step = null;
              await saveUser(user);
              await ctx.reply("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!", mainMenu);
            }
          } else {
            await ctx.reply("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.");
          }
          break;
        default:
          await ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. /start —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.");
      }
    } catch (e) {
      console.error("STEP MESSAGE ERROR:", e);
      await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
  } catch (e) {
    console.error("MESSAGE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

async function handleSearch(ctx, user, id, isInline = false) {
  try {
    if (!user || !user.finished) {
      if (isInline) return ctx.answerCbQuery("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!");
      return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!");
    }

    const hasPending = await checkPendingLikes(ctx, user);
    if (hasPending) return;

    const seen = user.seen || [];
    const allUsers = await getAllUsers();
    const others = allUsers.filter(
      (u) => u.id !== id && u.finished && !seen.includes(u.id)
    );

    if (others.length === 0) {
      user.currentView = null; // <--- reset
      await saveUser(user);
      if (isInline) {
        await ctx.editMessageText(
          "–ê–Ω–∫–µ—Ç –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.",
          mainMenu
        );
      } else {
        await ctx.reply("–ê–Ω–∫–µ—Ç –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.", mainMenu);
      }
      return;
    }

    const other = others[Math.floor(Math.random() * others.length)];

    user.currentView = other.id;
    await saveUser(user);

    const photos = other.data.photos;
    await ctx.replyWithMediaGroup([
      {
        type: "photo",
        media: photos[0],
        caption: prettyProfile(other),
        parse_mode: "HTML",
      },
      ...photos.slice(1).map((file_id) => ({
        type: "photo",
        media: file_id,
      })),
    ]);
    // Use reply-keyboard for search mode
    await ctx.reply("–ó—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä:", searchMenu);
  } catch (e) {
    console.error("handleSearch ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
}

async function handleLikeDislike(ctx, user, action, isInline = false) {
  try {
    if (!user || !user.currentView) {
      if (isInline) return ctx.answerCbQuery("–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É");
      return ctx.reply("–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É");
    }
    const id = ctx.from.id;
    const otherId = user?.currentView;

    user.seen = [...(user.seen || []), otherId];
    await saveUser(user);

    const likedUser = await loadUser(otherId);
    if (likedUser) {
      if (action === "like") {
        if ((likedUser.seen || []).includes(id)) {
          // Mutual like: send media group (profile) and notification to both
          // –î–ª—è likedUser (otherId)
          if (user.data.photos && user.data.photos.length > 0) {
            await ctx.telegram.sendMediaGroup(otherId, [
              {
                type: "photo",
                media: user.data.photos[0],
                caption: prettyProfile(user),
                parse_mode: "HTML",
              },
              ...user.data.photos.slice(1).map((file_id) => ({
                type: "photo",
                media: file_id,
              })),
            ]);
          }
          await ctx.telegram.sendMessage(
            otherId,
            `üíû –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ @${ctx.from.username || user.id}!`
          );

          // –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –ª–∞–π–∫–Ω—É–≤ (current user)
          if (likedUser.data.photos && likedUser.data.photos.length > 0) {
            await ctx.telegram.sendMediaGroup(id, [
              {
                type: "photo",
                media: likedUser.data.photos[0],
                caption: prettyProfile(likedUser),
                parse_mode: "HTML",
              },
              ...likedUser.data.photos.slice(1).map((file_id) => ({
                type: "photo",
                media: file_id,
              })),
            ]);
          }
          await ctx.telegram.sendMessage(
            id,
            `üíû –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ @${
              likedUser.username || likedUser.id
            }!\n\n–ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ —á—É–¥–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é!`
          );
          // After mutual like, return and do not proceed to search
          return;
        } else {
          if (!likedUser.pendingLikes) likedUser.pendingLikes = [];
          if (!likedUser.pendingLikes.includes(user.id)) {
            likedUser.pendingLikes.push(user.id);
            await saveUser(likedUser);

            // –ù–µ–≥–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, —è–∫–æ–º—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫
            // –°–ø–æ—á–∞—Ç–∫—É –π–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—å
            if (user.data.photos && user.data.photos.length > 0) {
              await ctx.telegram.sendMediaGroup(likedUser.id, [
                {
                  type: "photo",
                  media: user.data.photos[0],
                  caption: prettyProfile(user),
                  parse_mode: "HTML",
                },
                ...user.data.photos.slice(1).map((file_id) => ({
                  type: "photo",
                  media: file_id,
                })),
              ]);
            }
            // –ü–æ—Ç—ñ–º —Ç–µ–∫—Å—Ç –∑ –∫–Ω–æ–ø–∫–∞–º–∏ pendingMenu
            await ctx.telegram.sendMessage(
              likedUser.id,
              "–í–∞–º —Ö—Ç–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
              pendingMenu
            );
          }
        }
      }
    }
    await handleSearch(ctx, user, id, isInline);
  } catch (e) {
    console.error("handleLikeDislike ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
}

// --------------------- –ó–∞–ø—É—Å–∫ ------------------------
console.log("--------- BOT IS RUNNING! ---------");

const WEBHOOK_PATH = "/bot" + process.env.BOT_TOKEN;
const WEBHOOK_URL = `https://${
  process.env.RENDER_EXTERNAL_HOSTNAME || "your-app-name.onrender.com"
}${WEBHOOK_PATH}`;

(async () => {
  await bot.telegram.setWebhook(WEBHOOK_URL);
})();

app.use(bot.webhookCallback(WEBHOOK_PATH));
app.get("/", (req, res) => res.send("Znaimo bot is alive!"));

// –°–ª—É—Ö–∞—î–º–æ –ø–æ—Ä—Ç Render
app.listen(process.env.PORT, () => {
  console.log(`Server listening on port ${process.env.PORT}`);
});

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));

// –ö–Ω–æ–ø–∫–∏ –ø–æ—à—É–∫—É (reply-keyboard)
bot.hears("üíù", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished || !user.currentView) {
    return ctx.reply("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏.");
  }
  await handleLikeDislike(ctx, user, "like");
});

bot.hears("‚ùå", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished || !user.currentView) {
    return ctx.reply("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏.");
  }
  await handleLikeDislike(ctx, user, "dislike");
});

bot.hears("‚öôÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! –ù–∞—Ç–∏—Å–Ω–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏.");
  }
  if (!user.data.photos || user.data.photos.length === 0) {
    return ctx.reply("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.");
  }
  const photos = user.data.photos;
  await ctx.replyWithMediaGroup([
    {
      type: "photo",
      media: photos[0],
      caption: prettyProfile(user),
      parse_mode: "HTML",
    },
    ...photos.slice(1).map((file_id) => ({
      type: "photo",
      media: file_id,
    })),
  ]);
  await ctx.reply("–û–±–µ—Ä–∏ –¥—ñ—é:", mainMenu);
});
