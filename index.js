const express = require("express");
const { Telegraf, Markup } = require("telegraf");
const fs = require("fs");
const bot = new Telegraf(process.env.BOT_TOKEN);

const USERS_FILE = "./users.json";

if (!fs.existsSync(USERS_FILE)) {
  fs.writeFileSync(USERS_FILE, JSON.stringify({}, null, 2));
}

function loadUsers() {
  if (!fs.existsSync(USERS_FILE)) return {};
  try {
    return JSON.parse(fs.readFileSync(USERS_FILE));
  } catch (error) {
    console.error("Failed to parse users.json:", error);
    return {};
  }
}

function saveUsers(data) {
  try {
    fs.writeFileSync(USERS_FILE, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error("Failed to save users.json:", error);
  }
}

bot.catch((err, ctx) => {
  console.error("Error: ", err);
});

bot.start(async (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);

  const user = users[id];

  const profileIsIncomplete =
    !user ||
    !user.gender ||
    !user.searchGender ||
    !user.age ||
    !user.city ||
    !user.photos ||
    user.photos.length === 0;

  if (profileIsIncomplete) {
    users[id] = {
      id,
      name: ctx.from.first_name || "–ë–µ–∑ —ñ–º–µ–Ω—ñ",
      photos: user?.photos || [],
      description: user?.description || "",
      liked: user?.liked || [],
      likedBy: user?.likedBy || [],
      views: user?.views || 0,
      isPremium: user?.isPremium || false,
      gender: user?.gender || null,
      searchGender: user?.searchGender || null,
      age: user?.age || null,
      city: user?.city || null,
      stage: user?.stage || null,
    };
    saveUsers(users);

    return ctx.reply("üî∑ –©–æ–± –ø–æ—á–∞—Ç–∏ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", {
      reply_markup: {
        keyboard: [["üöÄ –ü–æ—á–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  ctx.reply("‚úÖ –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —Ç–∞ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å:", {
    reply_markup: {
      keyboard: [
        ["üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"],
        ["üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
});

bot.hears("üöÄ –ü–æ—á–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏", async (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  if (!users[id]) {
    users[id] = {
      id,
      name: ctx.from.first_name || "–ë–µ–∑ —ñ–º–µ–Ω—ñ",
      photos: [],
      description: "",
      liked: [],
      likedBy: [],
      views: 0,
      isPremium: false,
      gender: null,
      searchGender: null,
      stage: null,
    };
    saveUsers(users);
  }

  if (!users[id].gender) {
    return ctx.reply("üë§ –û–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:", {
      reply_markup: {
        keyboard: [["üöπ –Ø —Ö–ª–æ–ø–µ—Ü—å", "üö∫ –Ø –¥—ñ–≤—á–∏–Ω–∞"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  if (!users[id].searchGender) {
    return ctx.reply("üëÄ –ö–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏?", {
      reply_markup: {
        keyboard: [["–•–ª–æ–ø—Ü—ñ–≤", "–î—ñ–≤—á–∞—Ç", "–ë—É–¥—å –∫–æ–≥–æ"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  ctx.reply("‚úÖ –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —Ç–∞ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å:", {
    reply_markup: {
      keyboard: [
        ["üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"],
        ["üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
});

// –í–∏–±—ñ—Ä —Å—Ç–∞—Ç—ñ
bot.hears(["üöπ –Ø —Ö–ª–æ–ø–µ—Ü—å", "üö∫ –Ø –¥—ñ–≤—á–∏–Ω–∞"], (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  if (!users[id]) return;
  const isMale = ctx.message.text.includes("—Ö–ª–æ–ø–µ—Ü—å");
  users[id].gender = isMale ? "male" : "female";
  saveUsers(users);
  ctx.reply("üëÄ –ö–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏?", {
    reply_markup: {
      keyboard: [["–•–ª–æ–ø—Ü—ñ–≤", "–î—ñ–≤—á–∞—Ç", "–ë—É–¥—å –∫–æ–≥–æ"]],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

// –í–∏–±—ñ—Ä –∫–æ–≥–æ —à—É–∫–∞—Ç–∏
bot.hears(["–•–ª–æ–ø—Ü—ñ–≤", "–î—ñ–≤—á–∞—Ç", "–ë—É–¥—å –∫–æ–≥–æ"], (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  if (!users[id]) return;
  if (ctx.message.text === "–î—ñ–≤—á–∞—Ç") {
    users[id].searchGender = "female";
  } else if (ctx.message.text === "–•–ª–æ–ø—Ü—ñ–≤") {
    users[id].searchGender = "male";
  } else {
    users[id].searchGender = "any";
  }
  users[id].stage = "minAge";
  saveUsers(users);
  ctx.reply("üî¢ –í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –∞–Ω–∫–µ—Ç, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∞–º —Ç—Ä–∞–ø–ª—è—Ç–∏—Å—å –≤ –ø–æ—à—É–∫—É —Ç–∞ —è–∫–∏–º –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:", {
    reply_markup: { force_reply: true },
  });
});

bot.hears("üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  const user = users[id];

  if (!user) return ctx.reply("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à–∏ /start");
  if (!user.photos || user.photos.length === 0) {
    return ctx.reply("üì∑ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ö–æ—á–∞ –± 1 —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± —à—É–∫–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏.");
  }
  if (!user.gender || !user.searchGender) {
    return ctx.reply("üë§ –û–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å —Ç–∞ –∫–æ–≥–æ —à—É–∫–∞—î—à —á–µ—Ä–µ–∑ /start");
  }
  if (!user.isPremium && user.views >= 50)
    return ctx.reply(
      "üîí –í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ 50 –∞–Ω–∫–µ—Ç. üíé –ö—É–ø–∏ –ø—Ä–µ–º—ñ—É–º —É —ñ–Ω—à–æ–≥–æ –±–æ—Ç–∞."
    );

  // –ó–±–∏—Ä–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
  const allCandidates = Object.values(users).filter(u => {
    if (u.id === id) return false;
    if (!u.photos || u.photos.length === 0) return false;
    if (!u.gender) return false;
    if (user.searchGender !== "any" && u.gender !== user.searchGender) return false;
    if (u.age < (user.minAge || 14) || u.age > (user.maxAge || 99)) return false;
    return true;
  });

  if (allCandidates.length === 0) {
    return ctx.reply("üòî –ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.");
  }

  // –°–æ—Ä—Ç—É—î–º–æ: —Å–ø–æ—á–∞—Ç–∫—É —Ç—ñ, —â–æ –∑ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞
  const sameCity = allCandidates.filter(u => u.city === user.city);
  const otherCity = allCandidates.filter(u => u.city !== user.city);
  const sorted = [...sameCity, ...otherCity];

  // –û–±–∏—Ä–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ —á–µ—Ä–∑—ñ
  const index = user.views % sorted.length;
  const target = sorted[index];

  users[id].views += 1;
  users[id].lastSeenId = target.id;
  saveUsers(users);

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç–∏
  const caption = `üë§ ${target.name}\nüìù ${target.description || "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"}`;
  if (target.photos && target.photos[0]) {
    ctx.replyWithPhoto(target.photos[0], {
      caption,
      reply_markup: {
        keyboard: [
          ["üíò", "üíå", "‚ùå"],
          ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
        ],
        resize_keyboard: true,
      },
    });
  } else {
    ctx.reply(caption, {
      reply_markup: {
        keyboard: [
          ["üíò", "üíå", "‚ùå"],
          ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"],
        ],
        resize_keyboard: true,
      },
    });
  }
});

bot.hears("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É", async (ctx) => {
  await ctx.reply("‚úèÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å –¥–ª—è —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é:", {
    reply_markup: {
      force_reply: true,
      selective: true,
    },
  });
});

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ force-reply –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
bot.on("message", async (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  const user = users[id];
  if (!user) return;

  // Handle editing description
  if (
    ctx.message &&
    ctx.message.text &&
    ctx.message.reply_to_message &&
    ctx.message.reply_to_message.text === "‚úèÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å –¥–ª—è —Å–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é:"
  ) {
    user.description = ctx.message.text;
    saveUsers(users);
    return ctx.reply("üìù –û–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
  }

  if (!user.stage) return;

  const text = ctx.message.text.trim();
  switch (user.stage) {
    case "minAge": {
      const age = parseInt(text, 10);
      if (isNaN(age) || age < 14 || age > 99) {
        return ctx.reply("üî¥ –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö 14‚Äì99 —Ä–æ–∫—ñ–≤.\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
      }
      user.minAge = age;
      user.stage = "maxAge";
      saveUsers(users);
      return ctx.reply("üî¢ –í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –∞–Ω–∫–µ—Ç, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∞–º —Ç—Ä–∞–ø–ª—è—Ç–∏—Å—å –≤ –ø–æ—à—É–∫—É —Ç–∞ —è–∫–∏–º –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:", {
        reply_markup: { force_reply: true },
      });
    }
    case "maxAge": {
      const age = parseInt(text, 10);
      if (isNaN(age) || age < 14 || age > 99 || age <= user.minAge) {
        return ctx.reply("üî¥ –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö 14‚Äì99 —Ä–æ–∫—ñ–≤ —ñ –±—ñ–ª—å—à–∏–º –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π.\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
      }
      user.maxAge = age;
      user.stage = "age";
      saveUsers(users);
      return ctx.reply("üéÇ –°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?", { reply_markup: { force_reply: true } });
    }
    case "age": {
      const age = parseInt(text, 10);
      if (isNaN(age) || age < 14 || age > 99) {
        return ctx.reply("üî¥ –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö 14‚Äì99 —Ä–æ–∫—ñ–≤.\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.");
      }
      user.age = age;
      user.stage = "city";
      saveUsers(users);
      return ctx.reply("üèôÔ∏è –ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞?", { reply_markup: { force_reply: true } });
    }
    case "city": {
      user.city = text;
      user.stage = null;
      saveUsers(users);
      // show profile preview and confirmation as before...
      const profileText = `‚Ä¢ –Ü–º'—è: ${user.name}\n‚Ä¢ –í—ñ–∫: ${user.age}\n‚Ä¢ –ú—ñ—Å—Ç–æ: ${user.city}\n\n‚Ä¢ –ü—Ä–æ —Å–µ–±–µ: ${user.description || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}`;
      if (user.photos && user.photos[0]) {
        await ctx.replyWithPhoto(user.photos[0], { caption: profileText });
      } else {
        await ctx.reply(profileText);
      }
      return ctx.reply("–û—Å—å —Ç–∞–∫ –≤–∏–≥–ª—è–¥–∞—î –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", {
        reply_markup: {
          keyboard: [["–¢–∞–∫, –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫", "–ù—ñ, —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏"]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    }
  }
});

// –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
bot.on("photo", async (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  if (!users[id]) {
    return ctx.reply("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à–∏ /start");
  }
  const photoArray = ctx.message.photo;
  const photo = photoArray[photoArray.length - 1]; // –Ω–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å
  const fileId = photo.file_id;
  const photos = users[id].photos || [];
  if (photos.length >= 3) {
    return ctx.reply("üì∏ –í–∏ –≤–∂–µ –¥–æ–¥–∞–ª–∏ 3 —Ñ–æ—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ.", {
      reply_markup: {
        keyboard: [["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ"]],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }
  photos.push(fileId);
  users[id].photos = photos;
  saveUsers(users);
  const count = photos.length;
  const buttons = count < 3
    ? [["üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ"], ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ"]]
    : [["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ"]];
  ctx.reply(`üì∑ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ (${count}/3)`, {
    reply_markup: { keyboard: buttons, resize_keyboard: true, one_time_keyboard: true },
  });
});

bot.hears("üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ", ctx => {
  ctx.reply("üîÑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–µ —Ñ–æ—Ç–æ (–¥–æ 3).");
});
bot.hears("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ", ctx => {
  const users = loadUsers();
  const user = users[String(ctx.from.id)];
  if (!user || !user.photos || user.photos.length === 0) {
    return ctx.reply("‚ö†Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ö–æ—á–∞ –± 1 —Ñ–æ—Ç–æ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.");
  }
  ctx.reply("‚úÖ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ.", {
    reply_markup: {
      keyboard: [
        ["üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"],
        ["üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
});

bot.hears("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  const u = users[id];
  if (!u || !u.photos || u.photos.length === 0)
    return ctx.reply("‚ö†Ô∏è –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω–∏ –∑ /start");

  const profileCaption = `üë§ ${u.name}\nüìù ${
    u.description || "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
  }\nüëÅ –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: ${u.views}`;

  if (u.photos && u.photos[0]) {
    ctx.replyWithPhoto(u.photos[0], { caption: profileCaption });
  } else {
    ctx.reply(profileCaption);
  }
});

bot.command("likes", (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  const user = users[id];
  if (!user) return ctx.reply("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à–∏ /start");
  if (!user.likedBy || user.likedBy.length === 0) {
    return ctx.reply("–ù—ñ—Ö—Ç–æ —â–µ –Ω–µ –ª–∞–π–∫–Ω—É–≤ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å.");
  }
  const likedByNames = user.likedBy
    .map((uid) => users[uid]?.name || "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    .join(", ");
  ctx.reply(`–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏: ${likedByNames}`);
});

bot.hears("üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤", (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  const user = users[id];
  if (!user) return ctx.reply("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ø–∏—à–∏ /start");

  const unseenLikers = (user.likedBy || []).filter((uid) => !user.liked.includes(uid));
  if (unseenLikers.length === 0) {
    return ctx.reply("üò¢ –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –ª–∞–π–∫—ñ–≤.");
  }

  unseenLikers.forEach((uid) => {
    const liker = users[uid];
    if (liker?.photos && liker.photos[0]) {
      ctx.replyWithPhoto(liker.photos[0], {
        caption: `‚Ä¢ –Ü–º'—è: ${liker.name}\n‚Ä¢ –í—ñ–∫: ${liker.age}\n‚Ä¢ –ú—ñ—Å—Ç–æ: ${liker.city || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n‚Ä¢ –ü—Ä–æ —Å–µ–±–µ: ${liker.description || "‚Äî"}`,
      });
    }
  });
});

// bot.action(/like_(.+)/, (ctx) => {
//   const users = loadUsers();
//   const fromId = String(ctx.from.id);
//   const toId = ctx.match[1];

//   if (!users[toId] || !users[fromId])
//     return ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.");

//   users[fromId].liked.push(toId);
//   users[toId].likedBy.push(fromId);
//   saveUsers(users);

//   ctx.reply("üíò –¢–∏ –≤–ø–æ–¥–æ–±–∞–≤(–ª–∞) —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!");
//   // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
//   bot.telegram.sendMessage(toId, `üíå –í–∞—Å –≤–ø–æ–¥–æ–±–∞–≤(–ª–∞) ${users[fromId].name}!`);

//   ctx.deleteMessage().catch(() => {});
// });

// bot.action(/skip_(.+)/, (ctx) => {
//   ctx.reply("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ.");
//   ctx.deleteMessage().catch(() => {});
// });

bot.hears("üíò", (ctx) => {
  const users = loadUsers();
  const fromId = String(ctx.from.id);
  const user = users[fromId];
  const toId = user.lastSeenId;

  if (!toId || !users[toId]) {
    return ctx.reply("‚õî –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏.");
  }

  if (!user.liked.includes(toId)) {
    user.liked.push(toId);
  }
  if (!users[toId].likedBy.includes(fromId)) {
    users[toId].likedBy.push(fromId);
  }

  saveUsers(users);

  // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
  if (users[toId].liked.includes(fromId)) {
    bot.telegram.sendMessage(toId, `üíû –í–∏ –∑–±—ñ–≥–ª–∏—Å—è –∑ ${user.name}!`);
    bot.telegram.sendMessage(fromId, `üíû –í–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ –∑ ${users[toId].name}!`);
  } else {
    bot.telegram.sendMessage(toId, `üíå –í–∞—Å –ª–∞–π–∫–Ω—É–≤(–ª–∞) ${user.name}`);
  }

  ctx.reply("üíò –í–∏ –≤–ø–æ–¥–æ–±–∞–ª–∏ –∞–Ω–∫–µ—Ç—É!");
  ctx.telegram.sendMessage(fromId, "üì± –ù–∞—Å—Ç—É–ø–Ω–∞ –∞–Ω–∫–µ—Ç–∞:", {
    reply_markup: {
      keyboard: [["üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É"]],
      resize_keyboard: true,
    },
  });
});

bot.hears("‚ùå", (ctx) => {
  ctx.reply("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ. –©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –∞–Ω–∫–µ—Ç—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å:", {
    reply_markup: {
      keyboard: [["üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É"]],
      resize_keyboard: true,
    },
  });
});

bot.hears("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", (ctx) => {
  ctx.reply("üîß –©–æ –±–∞–∂–∞—î—à –∑–º—ñ–Ω–∏—Ç–∏?", {
    reply_markup: {
      keyboard: [["üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"]],
      resize_keyboard: true,
    },
  });
});

bot.hears("‚úÖ –¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ ü§ñ", (ctx) => {
  const users = loadUsers();
  const id = String(ctx.from.id);
  const user = users[id];
  if (!user || !user.gender || !user.searchGender || !user.photos || user.photos.length === 0) {
    return ctx.reply("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ —á–µ—Ä–µ–∑ /start");
  }
  ctx.reply("‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞! –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ–Ω—à–∏—Ö:", {
    reply_markup: {
      keyboard: [
        ["üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"],
        ["üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
});

(bot.hears("–¢–∞–∫, –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫", (ctx) => {
  ctx.reply("‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞! –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ–Ω—à–∏—Ö:", {
    reply_markup: {
      keyboard: [
        ["üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"],
        ["üëÄ –•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"],
      ],
      resize_keyboard: true,
      one_time_keyboard: false,
    },
  });
}));

bot.hears("–ù—ñ, —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏", (ctx) => {
  ctx.reply("üîÅ –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏:", {
    reply_markup: {
      keyboard: [["üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"]],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

(async () => {
  await bot.telegram.setMyCommands([
    { command: "start", description: "üöÄ –ü–æ—á–∞—Ç–∏" },
    { command: "find", description: "üì± –ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É" },
    { command: "profile", description: "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å" },
    { command: "edit", description: "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É" },
  ]);
  bot.telegram.setChatMenuButton({
    menu_button: {
      type: "commands",
    },
  });

  const app = express();
  app.use(bot.webhookCallback("/"));
  app.get("/", (_, res) => res.send("ü§ñ Znaimo Bot is running."));
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, async () => {
    console.log(`üöÄ Server listening on port ${PORT}`);
    const webhookUrl = `https://znaimo-telegram-bot.onrender.com`;
    await bot.telegram.setWebhook(webhookUrl);
    console.log(`‚úÖ Webhook set to ${webhookUrl}`);
  });
})();

function getRandomUser(currentUserId, users) {
  const currentUser = users[currentUserId];
  const candidates = Object.values(users).filter(user => {
    if (user.id === currentUserId) return false;
    if (!user.photos || user.photos.length === 0) return false;
    if (!user.gender) return false;
    if (currentUser.searchGender !== "any" && user.gender !== currentUser.searchGender) return false;
    if (user.age < (currentUser.minAge || 14)) return false;
    if (user.age > (currentUser.maxAge || 99)) return false;
    return true;
  });
  if (candidates.length === 0) return null;
  return candidates[Math.floor(Math.random() * candidates.length)];
}
