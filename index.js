const express = require("express");
const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();

const { loadUser, saveUser, removeUser, getAllUsers } = require("./mongo");

const bot = new Telegraf(process.env.BOT_TOKEN);

const mainMenu = Markup.keyboard([
  ["üîç –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏", "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"],
]).resize();

const searchMenu = Markup.keyboard([["üíù", "‚ùå", "‚öôÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å"]]).resize();

const pendingMenu = Markup.keyboard([["üíù –í–∑–∞—î–º–Ω–æ", "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏"]]).resize();

const startProfile = {
  step: "name",
  editStep: null,
  data: {
    name: "",
    age: "",
    city: "",
    about: "",
    photos: [],
  },
  seen: [],
  finished: false,
  currentView: null,
  pendingLikes: [],
};

function prettyProfile(user) {
  const name = user.data.name || "";
  const age = user.data.age || "";
  const city = user.data.city || "";
  const about = user.data.about || "";
  let profileText = `<b>‚Ä¢ –Ü–º'—è:</b> ${name}\n<b>‚Ä¢ –í—ñ–∫:</b> ${age}\n`;
  if (city) {
    profileText += `<b>‚Ä¢ –ú—ñ—Å—Ç–æ:</b> ${city}\n`;
  }
  profileText += `<b>‚Ä¢ –ü—Ä–æ —Å–µ–±–µ:</b> ${about}`;
  return profileText;
}

// --------------------------- –ú—ñ–¥–ª–≤–∞—Ä –¥–ª—è pendingLikes ---------------------------
async function checkPendingLikes(ctx, user) {
  if (!user || !user.pendingLikes || user.pendingLikes.length === 0)
    return false;
  const pendingId = user.pendingLikes[0];
  const pendingUser = await loadUser(pendingId);
  if (
    pendingUser &&
    pendingUser.data &&
    pendingUser.data.photos &&
    pendingUser.data.photos.length > 0
  ) {
    await ctx.replyWithMediaGroup([
      {
        type: "photo",
        media: pendingUser.data.photos[0],
        caption: prettyProfile(pendingUser),
        parse_mode: "HTML",
      },
      ...pendingUser.data.photos.slice(1).map((file_id) => ({
        type: "photo",
        media: file_id,
      })),
    ]);
    await ctx.reply("–í–∞–º —Ö—Ç–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏–≤ –ª–∞–π–∫! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", pendingMenu);
  } else {
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–∏–≤ –∞–Ω–∫–µ—Ç—É ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ –∑ —á–µ—Ä–≥–∏
    user.pendingLikes.shift();
    await saveUser(user);
    return await checkPendingLikes(ctx, user); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
  }
  return true;
}

// --------------------------- –ë–∞–∑–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ ---------------------------
bot.start(async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    user = { ...startProfile, id, username: ctx.from.username || null };
    await saveUser(user);
    await ctx.reply("–í—ñ—Ç–∞—é —É Znaimo! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.");
    await ctx.reply("–ü–æ—á–Ω–µ–º–æ –∑ —ñ–º–µ–Ω—ñ. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?");
  } else {
    ctx.reply("–¢–∏ –≤–∂–µ –º–∞—î—à –∞–Ω–∫–µ—Ç—É! –û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ:", mainMenu);
  }
});

bot.on("message", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user) {
    user = { ...startProfile, id, username: ctx.from.username || null };
    await saveUser(user);
  }
  if (!user.pendingLikes) user.pendingLikes = [];

  // ---- 1. –û–±—Ä–æ–±–∫–∞ pending –ª–∞–π–∫—ñ–≤ (–∑–∞–≤–∂–¥–∏ –ü–ï–†–®–ê!) ----
  if (
    ctx.message.text === "üíù –í–∑–∞—î–º–Ω–æ" ||
    ctx.message.text === "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏"
  ) {
    if (user.pendingLikes.length > 0) {
      const pendingId = user.pendingLikes.shift();
      await saveUser(user);
      const pendingUser = await loadUser(pendingId);

      if (ctx.message.text === "üíù –í–∑–∞—î–º–Ω–æ" && pendingUser) {
        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –æ–±–æ–º!
        if (user.username) {
          await ctx.telegram.sendMessage(
            pendingId,
            `üíû –í–∏ —â–æ–π–Ω–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫!\n\n` +
              `–ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å!\n` +
              `–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: https://t.me/${user.username}`
          );
        }
        if (pendingUser.username) {
          await ctx.telegram.sendMessage(
            user.id,
            `üíû –í–∏ —â–æ–π–Ω–æ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫!\n\n` +
              `–ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —á–∞—Å!\n` +
              `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: https://t.me/${pendingUser.username}`
          );
        }
      }
      // –ü—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äî —è–∫—â–æ —â–µ —î pending, –æ–¥—Ä–∞–∑—É –Ω–∞—Å—Ç—É–ø–Ω–∏–π!
      if (user.pendingLikes.length > 0) {
        await saveUser(user);
        return await checkPendingLikes(ctx, user);
      }
      // –Ø–∫—â–æ pendingLikes –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –º–µ–Ω—é
      await saveUser(user);
      return ctx.reply("–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!", mainMenu);
    }
  }
  // –Ø–∫—â–æ —î pendingLikes ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∞–Ω–∫–µ—Ç—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —ñ —á–µ–∫–∞—Ç–∏ –¥—ñ—é
  if (user.pendingLikes.length > 0) {
    return await checkPendingLikes(ctx, user);
  }

  // --- –ö–Ω–æ–ø–∫–∞ –®—É–∫–∞—Ç–∏ ---
  if (ctx.message.text === "üîç –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏") {
    return await handleSearch(ctx, user, id);
  }

  // --- –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ—ñ–ª—å ---
  if (ctx.message.text === "‚öôÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å") {
    if (!user || !user.finished) {
      return ctx.reply(
        "–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! –ù–∞—Ç–∏—Å–Ω–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏.",
        Markup.removeKeyboard()
      );
    }
    if (!user.data.photos || user.data.photos.length === 0) {
      return ctx.reply(
        "–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.",
        Markup.keyboard([
          [
            "üîç –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏",
            "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
            "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
          ],
        ]).resize()
      );
    }
    const photos = user.data.photos;
    await ctx.replyWithMediaGroup([
      {
        type: "photo",
        media: photos[0],
        caption: prettyProfile(user),
        parse_mode: "HTML",
      },
      ...photos.slice(1).map((file_id) => ({
        type: "photo",
        media: file_id,
      })),
    ]);
    return ctx.reply("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", mainMenu);
  }

  // --- –ö–Ω–æ–ø–∫–∞ –ü—Ä–µ–º—ñ—É–º ---
  if (ctx.message.text === "‚≠ê –ü—Ä–µ–º—ñ—É–º") {
    return ctx.reply("–ü—Ä–µ–º—ñ—É–º —Å–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π ü´°", mainMenu);
  }

  // --- –ö–Ω–æ–ø–∫–∏ –ø–æ—à—É–∫—É/–ª–∞–π–∫—ñ–≤/–ø—Ä–æ—Ñ—ñ–ª—é (–ü–æ—à—É–∫) ---
  if (ctx.message.text === "üíù" || ctx.message.text === "‚ùå") {
    await handleLikeDislike(
      ctx,
      user,
      ctx.message.text === "üíù" ? "like" : "dislike"
    );
    return;
  }

  // --- –ö–Ω–æ–ø–∫–∞ –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å ---
  if (ctx.message.text === "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å") {
    if (user) {
      await removeUser(id);
    }
    return ctx.reply(
      "–ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ. /start —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ.",
      Markup.removeKeyboard()
    );
  }

  // --- –ö–Ω–æ–ø–∫–∞ ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å (–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è) ---
  if (
    ctx.message.text === "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å" ||
    ctx.message.text === "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
  ) {
    if (!user || !user.finished) {
      return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É! /start");
    }
    return ctx.reply(
      "–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?",
      Markup.keyboard([
        ["‚úèÔ∏è –Ü–º'—è", "üéÇ –í—ñ–∫", "üè† –ú—ñ—Å—Ç–æ", "üìù –û–ø–∏—Å", "ü§≥ –§–æ—Ç–æ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
      ]).resize()
    );
  }

  // --- –ú–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ---
  if (ctx.message.text === "‚úèÔ∏è –Ü–º'—è") {
    user.editStep = "edit_name";
    await saveUser(user);
    return ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º º—è:");
  }
  if (ctx.message.text === "üéÇ –í—ñ–∫") {
    user.editStep = "edit_age";
    await saveUser(user);
    return ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –≤—ñ–∫:");
  }
  if (ctx.message.text === "üè† –ú—ñ—Å—Ç–æ") {
    user.editStep = "edit_city";
    await saveUser(user);
    return ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:");
  }
  if (ctx.message.text === "üìù –û–ø–∏—Å") {
    user.editStep = "edit_about";
    await saveUser(user);
    return ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å (5-200 —Å–∏–º–≤–æ–ª—ñ–≤):");
  }
  if (ctx.message.text === "ü§≥ –§–æ—Ç–æ") {
    user.editStep = "edit_photos";
    user.data.photos = [];
    await saveUser(user);
    return ctx.reply(
      "–í—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ –æ–¥–Ω–µ –∑–∞ –æ–¥–Ω–∏–º (–º–∞–∫—Å–∏–º—É–º 3). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—à ‚Äî –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.",
      Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
        .oneTime()
        .resize()
    );
  }
  if (ctx.message.text === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") {
    if (!user || !user.finished) {
      return ctx.reply("–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! /start ‚Äî —â–æ–± –ø–æ—á–∞—Ç–∏.");
    }
    if (!user.data.photos || user.data.photos.length === 0) {
      return ctx.reply("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.");
    }
    const photos = user.data.photos;
    await ctx.replyWithMediaGroup([
      {
        type: "photo",
        media: photos[0],
        caption: prettyProfile(user),
        parse_mode: "HTML",
      },
      ...photos.slice(1).map((file_id) => ({
        type: "photo",
        media: file_id,
      })),
    ]);
    return ctx.reply("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", mainMenu);
  }

  // --- –ë–ª–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ---
  if (user && user.editStep) {
    switch (user.editStep) {
      case "edit_name":
        if (!ctx.message.text || ctx.message.text.length < 2) {
          return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º º—è:");
        }
        user.data.name = ctx.message.text.trim();
        user.editStep = null;
        await saveUser(user);
        ctx.reply("–Ü–º º—è –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
        break;

      case "edit_age":
        {
          const age = parseInt(ctx.message.text, 10);
          if (isNaN(age) || age < 16 || age > 99) {
            return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (16-99):");
          }
          user.data.age = age;
          user.editStep = null;
          await saveUser(user);
          ctx.reply("–í—ñ–∫ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
        }
        break;

      case "edit_city":
        if (!ctx.message.text || ctx.message.text.length < 2) {
          return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:");
        }
        user.data.city = ctx.message.text.trim();
        user.editStep = null;
        await saveUser(user);
        ctx.reply("–ú—ñ—Å—Ç–æ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
        break;

      case "edit_about":
        if (
          !ctx.message.text ||
          ctx.message.text.length < 5 ||
          ctx.message.text.length > 200
        ) {
          return ctx.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –≤—ñ–¥ 5 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤:");
        }
        user.data.about = ctx.message.text.trim();
        user.editStep = null;
        await saveUser(user);
        ctx.reply("–û–ø–∏—Å –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
        break;

      case "edit_photos":
        // --- –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ: –º–∞–∫—Å–∏–º—É–º 3, –ø—ñ—Å–ª—è —Ç—Ä–µ—Ç—å–æ–≥–æ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –¥–æ–¥–∞–≤–∞—Ç–∏ —â–µ ---
        if (ctx.message.photo) {
          if (user.data.photos.length >= 3) {
            return ctx.reply("3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.");
          }
          const fileId =
            ctx.message.photo[ctx.message.photo.length - 1].file_id;
          user.data.photos.push(fileId);
          await saveUser(user);
          if (user.data.photos.length === 3) {
            ctx.reply("3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.");
          } else {
            ctx.reply(
              `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${user.data.photos.length}/3). –©–µ –¥–æ–¥–∞—Ç–∏? –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.`,
              Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
                .oneTime()
                .resize()
            );
          }
        } else if (
          ctx.message.text === "–ì–æ—Ç–æ–≤–æ" ||
          ctx.message.text.toLowerCase() === "–≥–æ—Ç–æ–≤–æ"
        ) {
          if (user.data.photos.length === 0) {
            ctx.reply("–î–æ–¥–∞–π –º—ñ–Ω—ñ–º—É–º –æ–¥–Ω–µ —Ñ–æ—Ç–æ!");
          } else {
            user.editStep = null;
            await saveUser(user);
            ctx.reply("–§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", mainMenu);
          }
        } else {
          ctx.reply("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.");
        }
        break;
    }
    return;
  }

  // –Ø–∫—â–æ –∞–Ω–∫–µ—Ç–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ ‚Äî —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏/–ø–æ—à—É–∫
  if (user.finished) return;

  // --- –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ step-by-step ---
  switch (user.step) {
    case "name":
      if (!ctx.message.text || ctx.message.text.length < 2) {
        return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º º—è:");
      }
      user.data.name = ctx.message.text.trim();
      user.step = "age";
      await saveUser(user);
      ctx.reply("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?");
      break;

    case "age":
      {
        const age = parseInt(ctx.message.text, 10);
        if (isNaN(age) || age < 16 || age > 99) {
          return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (16-99):");
        }
        user.data.age = age;
        user.step = "city";
        await saveUser(user);
        ctx.reply("–í —è–∫–æ–º—É –º—ñ—Å—Ç—ñ —Ç–∏ –∂–∏–≤–µ—à?");
      }
      break;

    case "city":
      if (!ctx.message.text || ctx.message.text.length < 2) {
        return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:");
      }
      user.data.city = ctx.message.text.trim();
      user.step = "about";
      await saveUser(user);
      ctx.reply("–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ –∫–æ—Ä–æ—Ç–∫–æ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):");
      break;

    case "about":
      if (
        !ctx.message.text ||
        ctx.message.text.length < 5 ||
        ctx.message.text.length > 200
      ) {
        return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ (5-200 —Å–∏–º–≤–æ–ª—ñ–≤):");
      }
      user.data.about = ctx.message.text.trim();
      user.step = "photos";
      await saveUser(user);
      ctx.reply(
        "–î–æ–¥–∞–π —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3).\n–í—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ –æ–¥–Ω–µ –∑–∞ –æ–¥–Ω–∏–º, –∫–æ–ª–∏ –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.",
        Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
          .oneTime()
          .resize()
      );
      break;

    case "photos":
      if (ctx.message.photo) {
        if (user.data.photos.length >= 3) {
          return ctx.reply("3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.");
        }
        const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        user.data.photos.push(fileId);
        await saveUser(user);
        if (user.data.photos.length === 3) {
          ctx.reply("3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.");
        } else {
          ctx.reply(
            `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${user.data.photos.length}/3). –©–µ –¥–æ–¥–∞—Ç–∏? –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.`,
            Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
              .oneTime()
              .resize()
          );
        }
      } else if (
        ctx.message.text === "–ì–æ—Ç–æ–≤–æ" ||
        ctx.message.text.toLowerCase() === "–≥–æ—Ç–æ–≤–æ"
      ) {
        if (user.data.photos.length === 0) {
          ctx.reply("–î–æ–¥–∞–π –º—ñ–Ω—ñ–º—É–º –æ–¥–Ω–µ —Ñ–æ—Ç–æ!");
        } else {
          user.finished = true;
          user.step = null;
          await saveUser(user);
          ctx.reply("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!", mainMenu);
        }
      } else {
        ctx.reply("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.");
      }
      break;

    default:
      ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. /start —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.");
  }
});

// ----------- –ü–æ—à—É–∫ —ñ–Ω—à–∏—Ö –∞–Ω–∫–µ—Ç ----------------------

async function handleSearch(ctx, user, id) {
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!");
  }
  const seen = user.seen || [];
  const allUsers = await getAllUsers();
  const others = allUsers;
}
