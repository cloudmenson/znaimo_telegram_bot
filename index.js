const express = require("express");
const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();

const { loadUser, saveUser } = require("./mongo");

const NodeGeocoder = require("node-geocoder");
const geocoder = NodeGeocoder({ provider: "openstreetmap" });

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

const { handleLikeDislike } = require("./handlers/like");
const { registerStartHandlers } = require("./handlers/start");
const { registerPushNotifications } = require("./handlers/push");
const { registerProfileHandlers } = require("./handlers/profile");
const {
  handleSearch,
  checkPendingLikes,
  prettyProfile,
} = require("./handlers/search");

registerStartHandlers(bot);
registerProfileHandlers(bot);
registerPushNotifications(bot);

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ Telegraf
bot.catch((err, ctx) => {
  console.error("BOT ERROR", err);
  ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
});

// –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤–∞
bot.on("message", async (ctx, next) => {
  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ /start —Ç–∞ —ñ–Ω—à—ñ
  if (ctx.message.text && ctx.message.text.startsWith("/")) {
    return next();
  }
  const id = ctx.from.id;
  const user = await loadUser(id);
  if (!user) {
    // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä ‚Äú–±–æ—Ç –¥—Ä—É–∫—É—î‚Äù
    // await ctx.sendChatAction("typing");

    // –û—Å–æ–±–∏—Å—Ç–µ –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è –ø–æ —ñ–º–µ–Ω—ñ
    await ctx.reply(
      `üëã –ü—Ä–∏–≤—ñ—Ç, ${ctx.from.first_name}! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Znaimo!

–©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ /start.

–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ:
‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω—É –∞–Ω–∫–µ—Ç—É
‚Ä¢ –ó–Ω–∞–π—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–∏—Ö
‚Ä¢ –†–æ–∑–ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ –ª–∞–π–∫—ñ–≤!`
    );
    return;
  }
  return next();
});

// –û—Å–Ω–æ–≤–Ω—ñ –º–µ–Ω—é —è–∫ –∑–≤–∏—á–∞–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
const mainMenu = Markup.keyboard([["üîç –ê–Ω–∫–µ—Ç–∏", "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", "üìù –ü—Ä–æ—Ñ—ñ–ª—å"]])
  .resize()
  .oneTime(false);
// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
bot.hears("üìù –ü—Ä–æ—Ñ—ñ–ª—å", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  // –Ø–∫—â–æ –∞–Ω–∫–µ—Ç–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∞
  if (!user || !user.finished) {
    return ctx.reply("–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É. –ù–∞—Ç–∏—Å–Ω–∏ /start.");
  }
  // –Ø–∫—â–æ —Ñ–æ—Ç–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ
  if (!user.data.photos || user.data.photos.length === 0) {
    return ctx.reply(
      "–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.\n" +
        "–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ, –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏."
    );
  }
  // –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É –∑ –∞–Ω–∫–µ—Ç–æ—é
  await ctx.replyWithMediaGroup([
    {
      type: "photo",
      media: user.data.photos[0],
      caption: prettyProfile(user),
      parse_mode: "HTML",
    },
    ...user.data.photos
      .slice(1)
      .map((file_id) => ({ type: "photo", media: file_id })),
  ]);
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–µ–Ω—é –¥—ñ–π
  await ctx.reply("–û–±–µ—Ä–∏ –¥—ñ—é:", mainMenu);
});

// –ú–µ–Ω—é –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ª–∞–π–∫—ñ–≤ (reply-keyboard)
const pendingMenu = Markup.keyboard([["üíù –í–∑–∞—î–º–Ω–æ", "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏"]])
  .resize()
  .oneTime(false);

// –ú–µ–Ω—é –¥–ª—è –ø–æ—à—É–∫—É (reply-keyboard)
const searchMenu = Markup.keyboard([["üíù", "‚ùå", "üìù –ü—Ä–æ—Ñ—ñ–ª—å"]])
  .resize()
  .oneTime(false);

// –ú–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ‚Äî —Ç—ñ–ª—å–∫–∏ –≤–æ–Ω–æ —ñ–Ω–ª–∞–π–Ω!
const editProfileMenu = Markup.inlineKeyboard([
  [
    Markup.button.callback("‚úèÔ∏è –Ü–º'—è", "edit_name"),
    Markup.button.callback("üéÇ –í—ñ–∫", "edit_age"),
  ],
  [
    Markup.button.callback("‚öß –°—Ç–∞—Ç—å", "edit_gender"),
    Markup.button.callback("üè† –ú—ñ—Å—Ç–æ", "edit_city"),
  ],
  [Markup.button.callback("üìù –û–ø–∏—Å", "edit_about")],
  [Markup.button.callback("üîé –ü–æ—à—É–∫ —Å—Ç–∞—Ç—ñ", "edit_searchGender")],
  [Markup.button.callback("ü§≥ –§–æ—Ç–æ", "edit_photos")],
  [Markup.button.callback("üö´ –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫", "edit_blacklist")],
]);

const startProfile = {
  step: "name",
  editStep: null,
  data: {
    name: "",
    gender: "",
    age: "",
    city: "",
    about: "",
    photos: [],
    searchGender: "", // preferred gender to search
    latitude: null,
    longitude: null,
  },
  seen: [],
  finished: false,
  currentView: null,
  pendingLikes: [],
};

bot.command("find", async (ctx) => {
  // –î—ñ—è —è–∫ bot.action("search")
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start");
  }
  await handleSearch(ctx, user, id, false);
});

bot.command("edit", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start");
  }
  await ctx.reply("–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?", editProfileMenu);
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: –ø–æ—à—É–∫
bot.action("search", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ª–∞–π–∫—ñ–≤ –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º
    const hasPending = await checkPendingLikes(ctx, user);
    if (hasPending) return;

    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.finished) {
      return ctx.answerCbQuery("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É!");
    }
    await handleSearch(ctx, user, id, true);
  } catch (e) {
    console.error("SEARCH ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

bot.hears("üîç –ê–Ω–∫–µ—Ç–∏", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);

  const hasPending = await checkPendingLikes(ctx, user);
  if (hasPending) return;

  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start");
  }
  await handleSearch(ctx, user, id, false);
});

bot.hears("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start");
  }
  await ctx.reply("–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?", editProfileMenu);
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
bot.action("edit_profile", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.finished) {
      return ctx.answerCbQuery("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É!");
    }
    await ctx.editMessageText("–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?", editProfileMenu);
  } catch (e) {
    console.error("EDIT_PROFILE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

// –ú–µ–Ω—é –ø–æ—à—É–∫—É: –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫/–ø—Ä–æ—Ñ—ñ–ª—å
bot.action("like", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.currentView) {
      return ctx.answerCbQuery("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
    await handleLikeDislike(ctx, user, "like", true);
  } catch (e) {
    console.error("LIKE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("dislike", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    if (!user.currentView) {
      return ctx.answerCbQuery("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
    await handleLikeDislike(ctx, user, "dislike", true);
  } catch (e) {
    console.error("DISLIKE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ pending likes —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
bot.hears("üíù –í–∑–∞—î–º–Ω–æ", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user.pendingLikes || user.pendingLikes.length === 0) {
    return ctx.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –ª–∞–π–∫.", mainMenu);
  }
  const pendingId = user.pendingLikes.shift();
  await saveUser(user);
  const pendingUser = await loadUser(pendingId);

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç pendingUser –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
  if (pendingUser && pendingUser.username) {
    await ctx.reply(
      `üíû –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫!

–ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ —á—É–¥–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é!

https://t.me/${pendingUser.username}`,
      mainMenu
    );
  }

  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ctx.from) pendingUser
  if (pendingUser) {
    const usernameOrId = user.username ? user.username : user.id;
    await ctx.telegram.sendMessage(
      pendingId,
      `üíû –£ –≤–∞—Å –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫!

–ë–∞–∂–∞—î–º–æ –ø—Ä–∏—î–º–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —Ç–∞ —á—É–¥–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é!

https://t.me/${usernameOrId}`
    );
  }
});
bot.hears("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user.pendingLikes || user.pendingLikes.length === 0) {
    return ctx.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –ª–∞–π–∫.", mainMenu);
  }
  user.pendingLikes.shift();
  await saveUser(user);
  if (user.pendingLikes.length > 0) {
    await checkPendingLikes(ctx, user);
  } else {
    await ctx.reply("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ.", mainMenu);
  }
});

// –ú–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: –ø–æ–ª—è
bot.action("edit_name", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_name";
    await saveUser(user);
    await ctx.reply(
      "‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º º—è:",
      Markup.keyboard([["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
        .resize()
        .oneTime(true)
    );
  } catch (e) {
    console.error("EDIT_NAME ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_gender", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_gender";
    await saveUser(user);
    return ctx.reply(
      "‚öß –û–±–µ—Ä–∏ —Å—Ç–∞—Ç—å:",
      Markup.keyboard([["–•–ª–æ–ø–µ—Ü—å", "–î—ñ–≤—á–∏–Ω–∞", "–Ü–Ω—à–µ"], ["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
        .resize()
        .oneTime(true)
    );
  } catch (e) {
    console.error("EDIT_GENDER ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_age", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_age";
    await saveUser(user);
    await ctx.reply(
      "üéÇ –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –≤—ñ–∫:",
      Markup.keyboard([["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
        .resize()
        .oneTime(true)
    );
  } catch (e) {
    console.error("EDIT_AGE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_city", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_city";
    await saveUser(user);
    await ctx.reply(
      "üè† –í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:",
      Markup.keyboard([["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
        .resize()
        .oneTime(true)
    );
  } catch (e) {
    console.error("EDIT_CITY ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
bot.action("edit_about", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
    user.editStep = "edit_about";
    await saveUser(user);
    await ctx.reply(
      "üìù –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å (5-200 —Å–∏–º–≤–æ–ª—ñ–≤):",
      Markup.keyboard([["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
        .resize()
        .oneTime(true)
    );
  } catch (e) {
    console.error("EDIT_ABOUT ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});
// Edit searchGender
bot.action("edit_searchGender", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  user.editStep = "edit_searchGender";
  await saveUser(user);
  return ctx.reply(
    "üîé –Ø–∫—ñ –∞–Ω–∫–µ—Ç–∏ —Ö–æ—á–µ—à —à—É–∫–∞—Ç–∏? –û–±–µ—Ä–∏ —Å—Ç–∞—Ç—å:",
    Markup.keyboard([["–•–ª–æ–ø—Ü—ñ", "–î—ñ–≤—á–∞—Ç–∞", "–ë—É–¥—å-—Ö—Ç–æ"], ["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
      .resize()
      .oneTime(true)
  );
});
bot.action("edit_photos", async (ctx) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      return ctx.answerCbQuery("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }
    user.editStep = "edit_photos";
    // Backup existing photos in case of cancellation
    user._backupPhotos = user.data.photos ? [...user.data.photos] : [];
    user.data.photos = [];
    await saveUser(user);
    // –ó–∞–ø–∏—Ç—É—î–º–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await ctx.reply(
      "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ. –ö–æ–ª–∏ –≥–æ—Ç–æ–≤—ñ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
      Markup.keyboard([["–ì–æ—Ç–æ–≤–æ", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
        .resize()
        .oneTime(true)
    );
  } catch (e) {
    console.error("EDIT_PHOTOS ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

bot.action(/^blacklist_confirm_(\d+)$/, async (ctx) => {
  const blockedId = parseInt(ctx.match[1]);
  const id = ctx.from.id;
  const user = await loadUser(id);
  if (!user || !user.finished)
    return ctx.reply("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å.");

  // –î–æ–∑–≤–æ–ª—è—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –ª–∏—à–µ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–Ω–∫–µ—Ç–∏ –≤ –ø–æ—à—É–∫—É
  if (user.lastAction !== "search" || user.currentView !== blockedId) {
    return ctx.reply(
      "‚ùó –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ –ª–∏—à–µ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–Ω–∫–µ—Ç–∏ –≤ –ø–æ—à—É–∫—É."
    );
  }

  user.blacklist = user.blacklist || [];

  if (user.blacklist.length >= 50) {
    return ctx.reply("üö´ –¢–∏ –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É –≤ 50 –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
  }

  if (!user.blacklist.includes(blockedId)) {
    user.blacklist.push(blockedId);
    await saveUser(user);
    await ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.");
  } else {
    await ctx.reply("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É.");
  }

  await handleSearch(ctx, user, id, false);
});

bot.action("blacklist_cancel", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  await ctx.reply("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
  if (user && user.currentView) {
    await handleSearch(ctx, user, id, false);
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É/—Ñ–æ—Ç–æ/–µ—Ç–∞–ø–∏)
bot.on("message", async (ctx, next) => {
  try {
    const id = ctx.from.id;
    let user = await loadUser(id);
    if (!user) {
      user = { ...startProfile, id, username: ctx.from.username || null };
      await saveUser(user);
    }
    if (!user.pendingLikes) user.pendingLikes = [];

    // --- –ë–ª–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ---
    if (user && user.editStep) {
      // Allow cancel during edit flow
      if (ctx.message.text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" || ctx.message.text === "/cancel") {
        user.editStep = null;
        // Restore photos if we had a backup
        if (user._backupPhotos) {
          user.data.photos = [...user._backupPhotos];
          delete user._backupPhotos;
        }
        await saveUser(user);
        return ctx.reply("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùå", mainMenu);
      }
      try {
        switch (user.editStep) {
          case "edit_searchGender":
            if (!["–•–ª–æ–ø—Ü—ñ", "–î—ñ–≤—á–∞—Ç–∞", "–ë—É–¥—å-—Ö—Ç–æ"].includes(ctx.message.text)) {
              return ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Å—Ç–∞—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:");
            }
            user.data.searchGender = ctx.message.text;
            user.editStep = null;
            await saveUser(user);
            await ctx.reply("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É —Å—Ç–∞—Ç—ñ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            break;
          case "edit_name":
            if (!ctx.message.text || ctx.message.text.length < 2) {
              return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º º—è:");
            }
            user.data.name = ctx.message.text.trim();
            user.editStep = null;
            await saveUser(user);
            await ctx.reply("–Ü–º º—è –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            break;
          case "edit_gender":
            if (!["–•–ª–æ–ø–µ—Ü—å", "–î—ñ–≤—á–∏–Ω–∞", "–Ü–Ω—à–µ"].includes(ctx.message.text)) {
              return ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Å—Ç–∞—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:");
            }
            user.data.gender = ctx.message.text;
            user.editStep = null;
            await saveUser(user);
            await ctx.reply("–°—Ç–∞—Ç—å –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            break;
          case "edit_age":
            {
              const age = parseInt(ctx.message.text, 10);
              if (isNaN(age) || age < 18 || age > 99) {
                return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (18-99):");
              }
              user.data.age = age;
              user.editStep = null;
              await saveUser(user);
              await ctx.reply("–í—ñ–∫ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            }
            break;
          case "edit_city":
            if (!ctx.message.text || ctx.message.text.length < 2) {
              return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:");
            }
            user.data.city = ctx.message.text.trim();
            // Geocode city to coordinates
            try {
              const geoRes = await geocoder.geocode(user.data.city);
              if (geoRes && geoRes.length) {
                user.data.latitude = geoRes[0].latitude;
                user.data.longitude = geoRes[0].longitude;
              }
            } catch (e) {
              console.error("GEOCODE ERROR:", e);
            }
            await saveUser(user);
            user.editStep = null;
            await ctx.reply("–ú—ñ—Å—Ç–æ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            break;
          case "edit_about":
            if (
              !ctx.message.text ||
              ctx.message.text.length < 5 ||
              ctx.message.text.length > 200
            ) {
              return ctx.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –≤—ñ–¥ 5 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤:");
            }
            user.data.about = ctx.message.text.trim();
            user.editStep = null;
            await saveUser(user);
            await ctx.reply("–û–ø–∏—Å –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
            break;
          case "edit_photos":
            if (ctx.message.photo) {
              const fileId =
                ctx.message.photo[ctx.message.photo.length - 1].file_id;
              user.data.photos.push(fileId);
              await saveUser(user);
              const count = user.data.photos.length;
              const text =
                count < 3
                  ? `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${count}/3). –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.`
                  : `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${count}/3). –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—è–≥–Ω—É—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.`;
              return ctx.reply(
                text,
                Markup.keyboard([["–ì–æ—Ç–æ–≤–æ", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
                  .resize()
                  .oneTime(true)
              );
            }
            if (
              ctx.message.text === "–ì–æ—Ç–æ–≤–æ" ||
              ctx.message.text?.toLowerCase() === "–≥–æ—Ç–æ–≤–æ"
            ) {
              if (!user.data.photos || user.data.photos.length === 0) {
                return ctx.reply(
                  "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ.",
                  Markup.keyboard([["–ì–æ—Ç–æ–≤–æ", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
                    .resize()
                    .oneTime(true)
                );
              }
              user.editStep = null;
              // Clear backup after successful update
              if (user._backupPhotos) {
                delete user._backupPhotos;
              }
              await saveUser(user);
              return ctx.reply("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é –æ–Ω–æ–≤–ª–µ–Ω–æ!", mainMenu);
            }
            return ctx.reply(
              "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
              Markup.keyboard([["–ì–æ—Ç–æ–≤–æ", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"]])
                .resize()
                .oneTime(true)
            );
        }
        return;
      } catch (e) {
        console.error("EDIT_STEP MESSAGE ERROR:", e);
        await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        return;
      }
    }

    // –Ø–∫—â–æ –∞–Ω–∫–µ—Ç–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ ‚Äî –Ω–µ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ (–≤—Å—ñ –¥—ñ—ó —á–µ—Ä–µ–∑ —ñ–Ω–ª–∞–π–Ω)
    if (user.finished) return next();

    // --- –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ step-by-step ---
    try {
      switch (user.step) {
        case "name":
          if (!ctx.message.text || ctx.message.text.length < 2) {
            return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º º—è:");
          }
          user.data.name = ctx.message.text.trim();
          user.step = "age";
          await saveUser(user);
          await ctx.reply("üéÇ –°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?");
          break;
        case "age": {
          const age = parseInt(ctx.message.text, 10);
          if (isNaN(age) || age < 18 || age > 99) {
            return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (18-99):");
          }
          user.data.age = age;
          user.step = "gender";
          await saveUser(user);
          // Prompt for gender immediately
          return ctx.reply(
            "‚öß –û–±–µ—Ä–∏ —Å—Ç–∞—Ç—å:",
            Markup.keyboard([["–•–ª–æ–ø–µ—Ü—å", "–î—ñ–≤—á–∏–Ω–∞", "–Ü–Ω—à–µ"]])
              .resize()
              .oneTime(true)
          );
        }
        case "gender":
          if (!["–•–ª–æ–ø–µ—Ü—å", "–î—ñ–≤—á–∏–Ω–∞", "–Ü–Ω—à–µ"].includes(ctx.message.text)) {
            return ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Å—Ç–∞—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:");
          }
          user.data.gender = ctx.message.text;
          user.step = "city";
          await saveUser(user);
          await ctx.reply("üè† –í —è–∫–æ–º—É –º—ñ—Å—Ç—ñ —Ç–∏ –∂–∏–≤–µ—à?");
          break;
        case "city":
          if (!ctx.message.text || ctx.message.text.length < 2) {
            return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:");
          }
          user.data.city = ctx.message.text.trim();
          // Geocode city to coordinates
          try {
            const geoRes = await geocoder.geocode(user.data.city);
            if (geoRes && geoRes.length) {
              user.data.latitude = geoRes[0].latitude;
              user.data.longitude = geoRes[0].longitude;
            }
          } catch (e) {
            console.error("GEOCODE ERROR:", e);
          }
          user.step = "about";
          await saveUser(user);
          await ctx.reply(
            "üìù –†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ –∫–æ—Ä–æ—Ç–∫–æ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):",
            Markup.removeKeyboard()
          );
          break;
        case "about":
          if (
            !ctx.message.text ||
            ctx.message.text.length < 5 ||
            ctx.message.text.length > 200
          ) {
            return ctx.reply(
              "üìù –í–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ (5‚Äì200 —Å–∏–º–≤–æ–ª—ñ–≤):"
            );
          }
          user.data.about = ctx.message.text.trim();
          user.step = "photos";
          await saveUser(user);
          return ctx.reply(
            "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ. –ö–æ–ª–∏ –≥–æ—Ç–æ–≤—ñ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
              .resize()
              .oneTime(true)
          );
        case "photos":
          if (ctx.message.photo) {
            if (user.data.photos.length >= 3) {
              return ctx.reply(
                "3 —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—è–≥–Ω—É—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
                  .resize()
                  .oneTime(true)
              );
            }
            // Only add the last (highest-res) photo from the message
            const fileId =
              ctx.message.photo[ctx.message.photo.length - 1].file_id;
            user.data.photos.push(fileId);
            await saveUser(user);
            const count = user.data.photos.length;
            const text =
              count < 3
                ? `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${count}/3). –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.`
                : `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${count}/3). –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—è–≥–Ω—É—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.`;
            return ctx.reply(
              text,
              Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
                .resize()
                .oneTime(true)
            );
          }
          if (
            ctx.message.text === "–ì–æ—Ç–æ–≤–æ" ||
            ctx.message.text?.toLowerCase() === "–≥–æ—Ç–æ–≤–æ"
          ) {
            if (user.data.photos.length === 0) {
              return ctx.reply(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ.",
                Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
                  .resize()
                  .oneTime(true)
              );
            }
            // Move to search-gender selection
            user.step = "searchGender";
            await saveUser(user);
            return ctx.reply(
              "üîé –Ø–∫—ñ –∞–Ω–∫–µ—Ç–∏ —Ç–∏ —Ö–æ—á–µ—à —à—É–∫–∞—Ç–∏? –û–±–µ—Ä–∏ —Å—Ç–∞—Ç—å:",
              Markup.keyboard([["–•–ª–æ–ø—Ü—ñ", "–î—ñ–≤—á–∞—Ç–∞", "–ë—É–¥—å-—Ö—Ç–æ"]])
                .resize()
                .oneTime(true)
            );
          }
          return ctx.reply(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
              .resize()
              .oneTime(true)
          );
        case "searchGender":
          if (!["–•–ª–æ–ø—Ü—ñ", "–î—ñ–≤—á–∞—Ç–∞", "–ë—É–¥—å-—Ö—Ç–æ"].includes(ctx.message.text)) {
            return ctx.reply(
              "üîé –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Å—Ç–∞—Ç—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:",
              Markup.keyboard([["–•–ª–æ–ø—Ü—ñ", "–î—ñ–≤—á–∞—Ç–∞", "–ë—É–¥—å-—Ö—Ç–æ"]])
                .resize()
                .oneTime(true)
            );
          }
          if (ctx.message.text === "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏") {
            user.data.searchGender = "";
          } else {
            user.data.searchGender = ctx.message.text;
          }
          user.finished = true;
          user.step = null;
          await saveUser(user);
          return ctx.reply("‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!", mainMenu);
        default:
          await ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. /start —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.");
      }
    } catch (e) {
      console.error("STEP MESSAGE ERROR:", e);
      await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
  } catch (e) {
    console.error("MESSAGE ERROR:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
  }
});

// --------------------- –ó–∞–ø—É—Å–∫ ------------------------
(async () => {
  try {
    const WEBHOOK_PATH = "/bot" + process.env.BOT_TOKEN;
    const WEBHOOK_URL = `https://${
      process.env.RENDER_EXTERNAL_HOSTNAME || "your-app-name.onrender.com"
    }${WEBHOOK_PATH}`;

    // Set bot commands and webhook
    await bot.telegram.setMyCommands([
      { command: "profile", description: "üìù –ü—Ä–æ—Ñ—ñ–ª—å" },
      { command: "premium", description: "‚≠êÔ∏è –ü—Ä–µ–º—ñ—É–º" },
      { command: "referral", description: "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞" },
      { command: "privacy", description: "üîí –ü–æ–ª—ñ—Ç–∏–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ" },
      { command: "blacklist", description: "üö´ –î–æ–¥–∞—Ç–∏ –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫" },
      { command: "language", description: "üåê –ú–æ–≤–∞" },
    ]);
    await bot.telegram.setWebhook(WEBHOOK_URL);

    // Start webhook listener
    app.use(bot.webhookCallback(WEBHOOK_PATH));
    app.get("/", (req, res) => res.send("Znaimo bot is alive!"));

    // Listen on port
    app.listen(process.env.PORT, () => {
      console.log(`Server listening on port ${process.env.PORT}`);
    });
  } catch (e) {
    console.error("Startup error:", e);
  }
})();

process.once("SIGINT", () => process.exit(0));
process.once("SIGTERM", () => process.exit(0));

// –ö–Ω–æ–ø–∫–∏ –ø–æ—à—É–∫—É (reply-keyboard)
bot.hears("üíù", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished || !user.currentView) {
    return ctx.reply("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏.");
  }
  await handleLikeDislike(ctx, user, "like");
});

bot.hears("‚ùå", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user || !user.finished || !user.currentView) {
    return ctx.reply("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏.");
  }
  await handleLikeDislike(ctx, user, "dislike");
});

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
bot.command("referral", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.");
  }
  const link = `https://t.me/${ctx.botInfo.username}?start=${id}`;
  const count = user.referrals ? user.referrals.length : 0;
  const today = new Date().toISOString().slice(0, 10);
  const referralBonus = count * 5;
  const likesToday = user.lastLikeDate === today ? user.dailyLikes || 0 : 0;
  const maxLikes = 50 + referralBonus;

  await ctx.replyWithHTML(`üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞</b>

üì® <b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤:</b> <b>${count}</b>

üîó <b>–¢–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω—å:</b>
<code>https://t.me/${ctx.botInfo.username}?start=${id}</code>

‚ù§Ô∏è <b>–î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –ª–∞–π–∫—ñ–≤:</b> <b>${likesToday}/${maxLikes}</b>
(üß© <i>50 –±–∞–∑–æ–≤–∏—Ö</i> + üíé <i>${referralBonus} –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö</i>)

üìå <i>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ª–∞–π–∫–∏ –Ω–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è, —è–∫—â–æ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ª—é–¥–∏–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—É —ñ –ª–∞–π–∫–Ω–µ —Ö–æ—á–∞ –± 1 –∞–Ω–∫–µ—Ç—É.</i>`);
});

// –ü—Ä–µ–º—ñ—É–º —Å–∏—Å—Ç–µ–º–∞
bot.command("premium", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.");
  }
  // TODO: —ñ–º–ø–ª–µ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
  await ctx.reply("‚≠ê –ü—Ä–µ–º—ñ—É–º —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.");
});

// –ü–æ–ª—ñ—Ç–∏–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ
bot.command("privacy", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.");
  }
  await ctx.replyWithHTML(`
üîí <b>–ü–æ–ª—ñ—Ç–∏–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è Telegram-–±–æ—Ç–∞ Znaimo</b>
<i>–û–Ω–æ–≤–ª–µ–Ω–æ: 24 —Ç—Ä–∞–≤–Ω—è 2025</i>

<b>1. –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–ª–æ–∂–µ–Ω–Ω—è</b>
–ú–∏ —Ü—ñ–Ω—É—î–º–æ –≤–∞—à—É –ø—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å —ñ –ø—Ä–∞–≥–Ω–µ–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–∑–æ—Ä–æ –ø–æ—è—Å–Ω—é–≤–∞—Ç–∏, —è–∫—ñ –¥–∞–Ω—ñ –º–∏ –∑–±–∏—Ä–∞—î–º–æ —Ç–∞ —è–∫ —ó—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ. –¶—è –ø–æ–ª—ñ—Ç–∏–∫–∞ –æ–ø–∏—Å—É—î –æ–±—Ä–æ–±–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞ Znaimo.

<b>2. –î–∞–Ω—ñ, —è–∫—ñ –º–∏ –ó–ë–ò–†–ê–Ñ–ú–û —ñ –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û</b>
- <b>–û—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ Telegram</b>: ID, —ñ–º‚Äô—è, —é–∑–µ—Ä–Ω–µ–π–º
- <b>–î–∞–Ω—ñ –∞–Ω–∫–µ—Ç–∏</b>: —ñ–º‚Äô—è, –≤—ñ–∫, —Å—Ç–∞—Ç—å, –º—ñ—Å—Ç–æ, ‚Äú–ü—Ä–æ —Å–µ–±–µ‚Äù, —Ñ–æ—Ç–æ (<code>file_id</code>), –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É
- <b>–ú–µ—Ç–∞–¥–∞–Ω—ñ</b>: —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏, —Å—Ç–∞—Ç—É—Å (–∞–∫—Ç–∏–≤–Ω–∞/–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞), —ñ–Ω–∫–æ–≥–Ω—ñ—Ç–æ-—Ä–µ–∂–∏–º
- <b>–õ–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏</b>: –∫–æ–º—É –≤–∏ —Å—Ç–∞–≤–∏–ª–∏ —ñ —Ö—Ç–æ –≤–∞–º —Å—Ç–∞–≤–∏–≤ üíù/‚ùå, –≤–º—ñ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

<b>3. –î–∞–Ω—ñ, —è–∫—ñ –º–∏ –ù–ï –ó–ë–ò–†–ê–Ñ–ú–û</b>
- –ö–æ–Ω—Ç–∞–∫—Ç–∏, email, —Ç–µ–ª–µ—Ñ–æ–Ω
- –î–∞–Ω—ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ (–∫—Ä—ñ–º –ª–∞–π–∫—ñ–≤)
- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Ç—É –ø–æ–∑–∞ –∞–Ω–∫–µ—Ç–æ—é

<b>4. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö</b>
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è, –ø–æ–∫–∞–∑ —Ç–∞ –ø–æ—à—É–∫ –∞–Ω–∫–µ—Ç
- –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–∑–∞—î–º–Ω—ñ –ª–∞–π–∫–∏

<b>5. –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∞ –∑–∞—Ö–∏—Å—Ç</b>
- –ó–∞—Ö–∏—â–µ–Ω—ñ —Å–µ—Ä–≤–µ—Ä–∏ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–∏–º –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è–º
- –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
- –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º, –∫—Ä—ñ–º –≤–∏–ø–∞–¥–∫—ñ–≤, –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∏—Ö –∑–∞–∫–æ–Ω–æ–º

<b>6. –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</b>
- <code>/delete</code> (–ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ)
- –ê–±–æ –∑–º—ñ–Ω—ñ—Ç—å –¥–∞–Ω—ñ –∞–Ω–∫–µ—Ç–∏ –Ω–∞ —Ñ–µ–π–∫–æ–≤—ñ —ñ –≤–∏–¥–∞–ª—ñ—Ç—å –±–æ—Ç–∞ –∑—ñ —Å–≤–æ–≥–æ —á–∞—Ç—É

<b>7. –ó–º—ñ–Ω–∏ –≤ –ø–æ–ª—ñ—Ç–∏—Ü—ñ</b>
–ú–∏ –º–æ–∂–µ–º–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ü—é –ø–æ–ª—ñ—Ç–∏–∫—É; –∑–º—ñ–Ω–∏ –±—É–¥—É—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—ñ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.

<b>8. –ö–æ–Ω—Ç–∞–∫—Ç–∏</b>
–ü–∏—Ç–∞–Ω–Ω—è/–∑–∞—É–≤–∞–∂–µ–Ω–Ω—è: znaimo.bot@gmail.com
  `);
});

// –î–æ–¥–∞—Ç–∏ –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
bot.command("blacklist", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);

  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.");
  }

  // –î–æ–∑–≤–æ–ª—è—î–º–æ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ª–∏—à–µ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ä–µ–∂–∏–º—ñ –ø–æ—à—É–∫—É –∞–Ω–∫–µ—Ç
  if (user.lastAction !== "search") {
    return ctx.reply(
      "‚ùó –ö–æ–º–∞–Ω–¥—É /blacklist –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–Ω–∫–µ—Ç."
    );
  }

  if (!user.currentView) {
    return ctx.reply("–¶—é –¥—ñ—é –º–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–∏—à–µ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–Ω–∫–µ—Ç–∏.");
  }

  const otherId = user.currentView;
  await ctx.reply(
    `üö´ –í–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É?`,
    Markup.inlineKeyboard([
      [Markup.button.callback("‚úÖ –¢–∞–∫", `blacklist_confirm_${otherId}`)],
      [Markup.button.callback("‚ùå –ù—ñ", `blacklist_cancel`)],
    ])
  );
});

// language
bot.command("language", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.");
  }
  // TODO: —ñ–º–ø–ª–µ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
  await ctx.reply("üåê –ú–∞–π–±—É—Ç–Ω—ñ –º–æ–≤–∏: üáµüá±, üá¨üáß ‚Äî —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.");
});

bot.action("edit_blacklist", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);

  if (!user || !user.finished) {
    return ctx.answerCbQuery("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start.");
  }

  const blacklist = user.blacklist || [];
  if (!blacklist.length) {
    return ctx.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
  }

  const buttons = [];
  for (let uid of blacklist) {
    const u = await loadUser(uid);
    const name = u?.data?.name || u?.username || `ID: ${uid}`;
    buttons.push([Markup.button.callback(`üö´ ${name}`, `unblock_${uid}`)]);
  }

  return ctx.reply(
    "üßæ –û–±–µ—Ä–∏ –∫–æ–≥–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏:",
    Markup.inlineKeyboard(buttons)
  );
});

bot.action(/^unblock_(\d+)$/, async (ctx) => {
  const unblockId = parseInt(ctx.match[1]);
  const id = ctx.from.id;
  const user = await loadUser(id);

  if (!user || !user.blacklist) return ctx.reply("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–ø–∏—Å–∫—É.");
  user.blacklist = user.blacklist.filter((uid) => uid !== unblockId);
  await saveUser(user);

  await ctx.answerCbQuery("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.");
  await ctx.editMessageText("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ ‚úÖ");
});
