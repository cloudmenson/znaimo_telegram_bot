const express = require("express");
const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();

const { loadUser, saveUser, removeUser, getAllUsers } = require("./mongo");

const bot = new Telegraf(process.env.BOT_TOKEN);

const mainMenu = Markup.keyboard([
  ["üîç –®—É–∫–∞—Ç–∏", "‚≠ê –ü—Ä–µ–º—ñ—É–º", "‚öôÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å"],
]).resize();

const startProfile = {
  step: "name",
  editStep: null,
  data: {
    name: "",
    age: "",
    about: "",
    photos: [],
  },
  seen: [],
  finished: false,
  currentView: null,
};

bot.start(async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);

  if (!user || !user.finished) {
    user = { ...startProfile, id };
    await saveUser(user);
    await ctx.reply("–í—ñ—Ç–∞—é —É Znaimo! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.");
    await ctx.reply("–ü–æ—á–Ω–µ–º–æ –∑ —ñ–º–µ–Ω—ñ. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?");
  } else {
    ctx.reply("–¢–∏ –≤–∂–µ –º–∞—î—à –∞–Ω–∫–µ—Ç—É! –û–±–∏—Ä–∞–π –¥—ñ—é –Ω–∏–∂—á–µ:", mainMenu);
  }
});

bot.on("message", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);

  // --- –ö–Ω–æ–ø–∫–∞ –®—É–∫–∞—Ç–∏ ---
  if (ctx.message.text === "üîç –®—É–∫–∞—Ç–∏") {
    return await handleSearch(ctx, user, id);
  }

  // --- –ö–Ω–æ–ø–∫–∞ –ü—Ä–µ–º—ñ—É–º ---
  if (ctx.message.text === "‚≠ê –ü—Ä–µ–º—ñ—É–º") {
    return ctx.reply("–ü—Ä–µ–º—ñ—É–º —Å–∫–æ—Ä–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π üòâ", mainMenu);
  }

  // --- –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ—ñ–ª—å ---
  if (ctx.message.text === "‚öôÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å") {
    if (!user || !user.finished) {
      return ctx.reply(
        "–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! /start ‚Äî —â–æ–± –ø–æ—á–∞—Ç–∏.",
        mainMenu
      );
    }
    if (!user.data.photos || user.data.photos.length === 0) {
      return ctx.reply("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.", mainMenu);
    }
    await ctx.replyWithMediaGroup(
      user.data.photos.map((file_id) => ({ type: "photo", media: file_id }))
    );
    return ctx.reply(
      `–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n–Ü–º'—è: ${user.data.name}\n–í—ñ–∫: ${user.data.age}\n–ü—Ä–æ —Å–µ–±–µ: ${user.data.about}`,
      Markup.keyboard([["‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏"]])
        .oneTime()
        .resize()
    );
  }

  // --- –ö–Ω–æ–ø–∫–∞ –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å ---
  if (ctx.message.text === "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å") {
    if (user) {
      await removeUser(id);
    }
    return ctx.reply(
      "–ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ. /start —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–Ω–æ–≤–æ.",
      Markup.removeKeyboard()
    );
  }

  // --- –ö–Ω–æ–ø–∫–∞ ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ (–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è) ---
  if (ctx.message.text === "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏") {
    if (!user || !user.finished) {
      return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–Ω–∫–µ—Ç—É! /start");
    }
    return ctx.reply(
      "–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚úèÔ∏è –Ü–º'—è", "edit_name")],
        [Markup.button.callback("üéÇ –í—ñ–∫", "edit_age")],
        [Markup.button.callback("üìù –û–ø–∏—Å", "edit_about")],
        [Markup.button.callback("üñº –§–æ—Ç–æ", "edit_photos")],
      ])
    );
  }

  // --- –ë–ª–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ---
  if (user && user.editStep) {
    switch (user.editStep) {
      case "edit_name":
        if (!ctx.message.text || ctx.message.text.length < 2) {
          return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º º—è:");
        }
        user.data.name = ctx.message.text.trim();
        user.editStep = null;
        await saveUser(user);
        ctx.reply("–Ü–º º—è –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
        break;

      case "edit_age":
        const age = parseInt(ctx.message.text, 10);
        if (isNaN(age) || age < 16 || age > 99) {
          return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (16-99):");
        }
        user.data.age = age;
        user.editStep = null;
        await saveUser(user);
        ctx.reply("–í—ñ–∫ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
        break;

      case "edit_about":
        if (
          !ctx.message.text ||
          ctx.message.text.length < 5 ||
          ctx.message.text.length > 200
        ) {
          return ctx.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å –≤—ñ–¥ 5 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤:");
        }
        user.data.about = ctx.message.text.trim();
        user.editStep = null;
        await saveUser(user);
        ctx.reply("–û–ø–∏—Å –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ", mainMenu);
        break;

      case "edit_photos":
        if (ctx.message.photo) {
          if (user.data.photos.length >= 3) {
            return ctx.reply(
              "–ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ! –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ', —è–∫—â–æ –≤—Å—ñ —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω—ñ."
            );
          }
          const fileId =
            ctx.message.photo[ctx.message.photo.length - 1].file_id;
          user.data.photos.push(fileId);
          await saveUser(user);
          ctx.reply(
            `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${user.data.photos.length}/3). –©–µ –¥–æ–¥–∞—Ç–∏? –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.`,
            Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
              .oneTime()
              .resize()
          );
        } else if (
          ctx.message.text === "–ì–æ—Ç–æ–≤–æ" ||
          ctx.message.text.toLowerCase() === "–≥–æ—Ç–æ–≤–æ"
        ) {
          if (user.data.photos.length === 0) {
            ctx.reply("–î–æ–¥–∞–π –º—ñ–Ω—ñ–º—É–º –æ–¥–Ω–µ —Ñ–æ—Ç–æ!");
          } else {
            user.editStep = null;
            await saveUser(user);
            ctx.reply("–§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", mainMenu);
          }
        } else {
          ctx.reply("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.");
        }
        break;
    }
    return; // –ù–µ –π–¥–µ–º–æ –¥–∞–ª—ñ –ø–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—é –∞–Ω–∫–µ—Ç–∏
  }

  // –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏ ‚Äî –ø–æ—á–∞—Ç–∏
  if (!user) {
    user = { ...startProfile, id };
    await saveUser(user);
    await ctx.reply("–í—ñ—Ç–∞—é —É Znaimo! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.");
    return ctx.reply("–ü–æ—á–Ω–µ–º–æ –∑ —ñ–º–µ–Ω—ñ. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?");
  }

  // –Ø–∫—â–æ –∞–Ω–∫–µ—Ç–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ ‚Äî —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏/–ø–æ—à—É–∫
  if (user.finished) return;

  // --- –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ step-by-step ---
  switch (user.step) {
    case "name":
      if (!ctx.message.text || ctx.message.text.length < 2) {
        return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º º—è:");
      }
      user.data.name = ctx.message.text.trim();
      user.step = "age";
      await saveUser(user);
      ctx.reply("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?");
      break;

    case "age":
      const age = parseInt(ctx.message.text, 10);
      if (isNaN(age) || age < 16 || age > 99) {
        return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (16-99):");
      }
      user.data.age = age;
      user.step = "about";
      await saveUser(user);
      ctx.reply("–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ –∫–æ—Ä–æ—Ç–∫–æ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤):");
      break;

    case "about":
      if (
        !ctx.message.text ||
        ctx.message.text.length < 5 ||
        ctx.message.text.length > 200
      ) {
        return ctx.reply("–í–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ (5-200 —Å–∏–º–≤–æ–ª—ñ–≤):");
      }
      user.data.about = ctx.message.text.trim();
      user.step = "photos";
      await saveUser(user);
      ctx.reply(
        "–î–æ–¥–∞–π —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 3).\n–í—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ –æ–¥–Ω–µ –∑–∞ –æ–¥–Ω–∏–º, –∫–æ–ª–∏ –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.",
        Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
          .oneTime()
          .resize()
      );
      break;

    case "photos":
      if (ctx.message.photo) {
        const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        if (user.data.photos.length >= 3) {
          return ctx.reply(
            "–ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ! –ù–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ', —è–∫—â–æ –≤—Å—ñ —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω—ñ."
          );
        }
        user.data.photos.push(fileId);
        await saveUser(user);
        ctx.reply(
          `–§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ (${user.data.photos.length}/3). –©–µ –¥–æ–¥–∞—Ç–∏? –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.`,
          Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
            .oneTime()
            .resize()
        );
      } else if (
        ctx.message.text === "–ì–æ—Ç–æ–≤–æ" ||
        ctx.message.text.toLowerCase() === "–≥–æ—Ç–æ–≤–æ"
      ) {
        if (user.data.photos.length === 0) {
          ctx.reply("–î–æ–¥–∞–π –º—ñ–Ω—ñ–º—É–º –æ–¥–Ω–µ —Ñ–æ—Ç–æ!");
        } else {
          user.finished = true;
          user.step = null;
          await saveUser(user);
          ctx.reply(
            "–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞! /search ‚Äî —à—É–∫–∞—Ç–∏ –ª—é–¥–µ–π, /edit ‚Äî —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É.",
            mainMenu
          );
        }
      } else {
        ctx.reply("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ì–æ—Ç–æ–≤–æ'.");
      }
      break;

    default:
      ctx.reply("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. /start —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.");
  }
});

// ----------- Inline-—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é ------------

bot.action("edit_name", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  user.editStep = "edit_name";
  await saveUser(user);
  ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º º—è:");
});
bot.action("edit_age", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  user.editStep = "edit_age";
  await saveUser(user);
  ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –≤—ñ–∫:");
});
bot.action("edit_about", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  user.editStep = "edit_about";
  await saveUser(user);
  ctx.reply("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å (5-200 —Å–∏–º–≤–æ–ª—ñ–≤):");
});
bot.action("edit_photos", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  user.editStep = "edit_photos";
  user.data.photos = [];
  await saveUser(user);
  ctx.reply(
    "–í—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ –æ–¥–Ω–µ –∑–∞ –æ–¥–Ω–∏–º (–º–∞–∫—Å–∏–º—É–º 3). –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—à ‚Äî –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.",
    Markup.keyboard([["–ì–æ—Ç–æ–≤–æ"]])
      .oneTime()
      .resize()
  );
});

// ----------- –ü–æ—à—É–∫ —ñ–Ω—à–∏—Ö –∞–Ω–∫–µ—Ç ----------------------

async function handleSearch(ctx, user, id) {
  if (!user || !user.finished) {
    return ctx.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!");
  }
  const seen = user.seen || [];
  const allUsers = await getAllUsers();
  const others = allUsers.filter(
    (u) => u.id !== id && u.finished && !seen.includes(u.id)
  );

  if (others.length === 0) {
    return ctx.reply("–ê–Ω–∫–µ—Ç –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.");
  }

  const other = others[Math.floor(Math.random() * others.length)];

  user.currentView = other.id;
  await saveUser(user);

  await ctx.replyWithMediaGroup(
    other.data.photos.map((file_id) => ({ type: "photo", media: file_id }))
  );
  await ctx.reply(
    `–Ü–º'—è: ${other.data.name}\n–í—ñ–∫: ${other.data.age}\n–ü—Ä–æ —Å–µ–±–µ: ${other.data.about}`,
    Markup.inlineKeyboard([
      Markup.button.callback("üëç –õ–∞–π–∫", "like"),
      Markup.button.callback("üëé –î–∏–∑–ª–∞–π–∫", "dislike"),
    ])
  );
}

// ----------- –õ–∞–π–∫ / –î–∏–∑–ª–∞–π–∫ ----------------------

bot.action("like", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  const otherId = user?.currentView;

  if (!otherId) return ctx.reply("–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É '–®—É–∫–∞—Ç–∏'");

  user.seen = [...(user.seen || []), otherId];
  await saveUser(user);
  ctx.reply("–¢–æ–±—ñ —Å–ø–æ–¥–æ–±–∞–ª–∞—Å—è –∞–Ω–∫–µ—Ç–∞!");
  ctx.deleteMessage();
});
bot.action("dislike", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);
  const otherId = user?.currentView;

  if (!otherId) return ctx.reply("–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É '–®—É–∫–∞—Ç–∏'");

  user.seen = [...(user.seen || []), otherId];
  await saveUser(user);
  ctx.reply("–ê–Ω–∫–µ—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.");
  ctx.deleteMessage();
});

// --------------------- /edit (—Å–∫–∏–¥–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏) ------------------

bot.command("edit", async (ctx) => {
  const id = ctx.from.id;
  let user = await loadUser(id);
  if (!user) {
    ctx.reply("–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏! /start");
  } else {
    ctx.reply(
      "–©–æ —Ç–∏ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?",
      Markup.inlineKeyboard([
        [Markup.button.callback("‚úèÔ∏è –Ü–º'—è", "edit_name")],
        [Markup.button.callback("üéÇ –í—ñ–∫", "edit_age")],
        [Markup.button.callback("üìù –û–ø–∏—Å", "edit_about")],
        [Markup.button.callback("üñº –§–æ—Ç–æ", "edit_photos")],
      ])
    );
  }
});

// --------------------- /profile ------------------------

bot.command("profile", async (ctx) => {
  const id = ctx.from.id;
  const user = await loadUser(id);

  if (!user || !user.finished) {
    return ctx.reply("–¢–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∞–Ω–∫–µ—Ç—É! /start ‚Äî —â–æ–± –ø–æ—á–∞—Ç–∏.");
  }
  if (!user.data.photos || user.data.photos.length === 0) {
    return ctx.reply("–£ —Ç–≤–æ—ó–π –∞–Ω–∫–µ—Ç—ñ —â–µ –Ω–µ–º–∞—î —Ñ–æ—Ç–æ.");
  }
  await ctx.replyWithMediaGroup(
    user.data.photos.map((file_id) => ({ type: "photo", media: file_id }))
  );
  ctx.reply(
    `–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n–Ü–º'—è: ${user.data.name}\n–í—ñ–∫: ${user.data.age}\n–ü—Ä–æ —Å–µ–±–µ: ${user.data.about}`,
    Markup.keyboard([["‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏"]])
      .oneTime()
      .resize()
  );
});

// --------------------- –ó–∞–ø—É—Å–∫ ------------------------
bot.launch();
console.log("@@@@@@@@@@@ BOT IS RUNNING! @@@@@@@@@@@");

const app = express();
app.get("/", (req, res) => res.send("Znaimo bot is alive!"));
app.listen(process.env.PORT);

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
